# Generated by Django 3.2.13 on 2023-02-11 07:28

import django.contrib.postgres.indexes
from django.contrib.postgres.search import SearchVector
import django.contrib.postgres.search
from django.db import migrations, models


def compute_search_vector(apps, schema_editor):
    Stock = apps.get_model("stock", "Stock")
    Stock.objects.update(search_vector=SearchVector("short_company_name"))


class Migration(migrations.Migration):

    dependencies = [
        ("stock", "0002_watchlist_watchliststock"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="stock",
            options={"ordering": ("ticker",)},
        ),
        migrations.AddField(
            model_name="stock",
            name="search_vector",
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AlterField(
            model_name="stock",
            name="short_company_name",
            field=models.CharField(db_index=True, max_length=100),
        ),
        migrations.AddIndex(
            model_name="stock",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="stock_stock_search__a76ea4_gin"
            ),
        ),
        migrations.RunSQL(
            sql="""
            CREATE TRIGGER search_vector_trigger
            BEFORE INSERT OR UPDATE OF short_company_name, search_vector
            ON stock_stock
            FOR EACH ROW EXECUTE PROCEDURE
            tsvector_update_trigger(
                search_vector, 'pg_catalog.english', short_company_name
            );
            UPDATE stock_stock SET search_vector = NULL;
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS search_vector_trigger
            ON stock_stock;
            """,
        ),
        migrations.RunPython(
            compute_search_vector, reverse_code=migrations.RunPython.noop
        ),
    ]
