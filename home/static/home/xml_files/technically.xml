<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0"><channel><title><![CDATA[Technically]]></title><description><![CDATA[Technically explains software and hardware in a simple and engaging way so you can impress your boss.]]></description><link>https://technically.substack.com</link><image><url>https://cdn.substack.com/image/fetch/w_256,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F91faf905-23bc-4189-98e2-095ba05cd769_256x256.png</url><title>Technically</title><link>https://technically.substack.com</link></image><generator>Substack</generator><lastBuildDate>Mon, 28 Mar 2022 10:58:59 GMT</lastBuildDate><atom:link href="https://technically.substack.com/feed" rel="self" type="application/rss+xml"/><copyright><![CDATA[Justin]]></copyright><language><![CDATA[en]]></language><webMaster><![CDATA[technically@substack.com]]></webMaster><itunes:owner><itunes:email><![CDATA[technically@substack.com]]></itunes:email><itunes:name><![CDATA[Justin]]></itunes:name></itunes:owner><itunes:author><![CDATA[Justin]]></itunes:author><googleplay:owner><![CDATA[technically@substack.com]]></googleplay:owner><googleplay:email><![CDATA[technically@substack.com]]></googleplay:email><googleplay:author><![CDATA[Justin]]></googleplay:author><item><title><![CDATA[What's GraphQL?]]></title><description><![CDATA[Just say what you want, honey]]></description><link>https://technically.substack.com/p/whats-graphql</link><guid isPermaLink="true">https://technically.substack.com/p/whats-graphql</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 15 Mar 2022 15:17:29 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5448ce5-738d-42be-b731-d7ae67580fe4_2221x1452.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p>GraphQL is a query language (and runtime) for building and using APIs: developers use it to simplify making API requests.</p><ul><li><p>Most apps and sites are built on a <strong>network of interconnected APIs</strong>: when you load your profile or feed, they provide the data</p></li><li><p>APIs are generally built with a <strong>purpose-per-endpoint</strong>, which means that getting all of the data you need involves <strong>many calls and server trips</strong></p></li><li><p>GraphQL acts as a <strong>wrapper on top of your APIs </strong>so you can say exactly what you want and only need to talk to the server once</p></li><li><p>GraphQL also supports <strong>schemas and introspection </strong>to make your data easier to understand</p></li></ul><p>Almost <a href="https://2019.stateofjs.com/data-layer/graphql/">40% of Javascript developers</a> have used GraphQL before, and it powers pretty high profile APIs like <a href="https://docs.github.com/en/graphql">Github&#8217;s</a>.&nbsp;&nbsp;</p><h2><strong>How apps work with regular APIs</strong></h2><p>To understand GraphQL, you need to understand why we needed it in the first place. In <a href="https://technically.substack.com/p/whats-a-web-app">What&#8217;s a Web App</a> and <a href="https://technically.substack.com/p/whats-an-api">What&#8217;s an API</a>, we covered the basics of how every app is built:</p><ol><li><p><strong>A frontend</strong> with components that you interact with (the Twitter &#8220;app&#8221; or site)</p></li><li><p><strong>A backend</strong> (database) that stores application data like user information</p></li><li><p><strong>API endpoints</strong> that interface between that frontend and that database</p></li></ol><p>When you load your Twitter feed, your browser is sending a bunch of API requests to the Twitter backend, fetching all of the data it needs (tweet text, who tweeted them, when they tweeted them, the number of likes, etc.) and then showing that information to you in a nice, pretty format. This same process happens when you click on a specific tweet, run a search, or mute a word - everything happens via API endpoints that Twitter created.&nbsp;</p><p>This is the way that web apps have worked basically forever. Unsurprisingly (as this is a pitch, after all) this &#8220;architecture&#8221; leads to a few frustrating problems:</p><p><strong>&#8594; Multiple server trips</strong></p><p>Because API endpoints tend to be organized on a <em>resource</em> basis, getting <em>all</em> of the information we need to populate a whole Twitter page - your profile, your feed, search results - tends to involve multiple API calls to multiple endpoints. I&#8217;m just spitballing here, but I&#8217;m guessing Twitter has endpoints like these that power your homepage:&nbsp;</p><ul><li><p>A <code>/profile</code> endpoint for profile data</p></li><li><p>A <code>/feed</code> endpoint for feed data</p></li><li><p>A <code>/trending</code> endpoint for trending topics</p></li></ul><p>This <em>resource-based</em> organization (one endpoint per <em>thing</em>) is actually a critical tenet of <a href="https://ninenines.eu/docs/en/cowboy/2.8/guide/rest_principles/#:~:text=REST%20is%20cacheable.,to%20speak%20to%20one%20another.">REST</a> &#8211; the protocol that most APIs are built on &#8211; but it can make apps a lot less efficient and more complex to manage.</p><blockquote><p>&#129300; <strong>Undefined Terms</strong> &#129300;</p><p>We&#8217;ll tackle the REST protocol and explain these ideas (resource-based organization) in a future post. For now, just think of endpoints as very single purpose (which is generally true).</p><p>&#129300; <strong>Undefined Terms</strong> &#129300;   </p></blockquote><p><strong>&#8594; Too much data</strong></p><p>Endpoints will often return more data than you actually need. Twitter&#8217;s <code>/profile </code>endpoint probably returns a ton of data about a user, and the frontend only actually <em>uses</em> a few basic parts of it (number of followers, number of tweets, etc.). This is by design &#8211; endpoints can be used for multiple tasks that require different data &#8211; but it means that you usually need to parse out the specific fields you need, and a bunch of extra data needs to travel across the internet.&nbsp;</p><p><strong>&#8594; General disorganization</strong></p><p>API endpoints are independent of each other &#8211; the only way to get a bird's eye view of what&#8217;s available to use and how to use it is documentation (engineers writing the answers down). Endpoints change all the time, and I have literally never worked at a company where engineers were excited about writing and maintaining updated documentation (although I&#8217;m told these people do exist).&nbsp;</p><h2><strong>GraphQL, our savior</strong></h2><p>Rewind to 2012: Facebook had just passed 1 billion users, and was dealing with all of the problems we just outlined, at hyper scale. They started working on an internal framework to solve them, and open sourced / released it in 2015. It&#8217;s called <a href="https://graphql.org/">GraphQL</a>, and it&#8217;s a wrapper that sits on top of your APIs; instead of querying all of your endpoints separately and directly, you query a <strong>single, ergonomic GraphQL endpoint</strong>, and it takes care of the legwork of actually getting you the data you need.&nbsp;</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5448ce5-738d-42be-b731-d7ae67580fe4_2221x1452.jpeg"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5448ce5-738d-42be-b731-d7ae67580fe4_2221x1452.jpeg" width="1456" height="952" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/d5448ce5-738d-42be-b731-d7ae67580fe4_2221x1452.jpeg&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:952,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:314310,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5448ce5-738d-42be-b731-d7ae67580fe4_2221x1452.jpeg 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5448ce5-738d-42be-b731-d7ae67580fe4_2221x1452.jpeg 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5448ce5-738d-42be-b731-d7ae67580fe4_2221x1452.jpeg 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5448ce5-738d-42be-b731-d7ae67580fe4_2221x1452.jpeg 1456w" sizes="100vw"></a></figure></div><p>You can think of a GraphQL server as a sort of personal shopper. Instead of going to 10 different stores and shopping at each, you tell your shopper what you&#8217;re looking for, and they come back to you with the finished haul. You just need to make sure you tell them exactly what you want.</p><p>Here&#8217;s an example of what a standard GraphQL query might look like:</p><pre><code>query {
  allStarships(first: 3) {
     starships {
      name
      model
      crew
      passengers
    } 
  }
}</code></pre><p>We&#8217;re querying our Star Wars endpoint (yes, seriously) for the first 3 starship models, and getting their names, models, crews, and passengers. Here&#8217;s what we&#8217;ll get back:</p><pre><code>{
  "data": {
    "allStarships": {
      "starships": [
        {
          "name": "CR90 corvette",
          "model": "CR90 corvette",
          "crew": "30-165",
          "passengers": "600"
        },
        {
          "name": "Star Destroyer",
          "model": "Imperial I-class Star Destroyer",
          "crew": "47,060",
          "passengers": "n/a"
        },
        {
          "name": "Sentinel-class landing craft",
          "model": "Sentinel-class landing craft",
          "crew": "5",
          "passengers": "75"
        }
      ]
    }
  }
}</code></pre><p>I got this from a <a href="https://graphql.org/swapi-graphql?query=query%20%7B%0A%20%20allStarships(first%3A%203)%20%7B%0A%20%20%20%20%20starships%20%7B%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20model%0A%20%20%20%20%20%20crew%0A%20%20%20%20%20%20passengers%0A%20%20%09%7D%20%0A%20%20%7D%0A%7D">working demo that GraphQL provides here</a> &#8211; play around with it to get a better sense of how this really works.&nbsp;</p><p>GraphQL solves the problems that we identified with typical API endpoints:</p><ul><li><p><strong>Multiple server trips</strong>: you define exactly what you want, and GraphQL takes care of which endpoints need to be used to return that data, all in one server trip</p></li><li><p><strong>Too much data</strong>: GraphQL only returns that fields (name, passengers, etc.) that you ask for, even if the original endpoints give you more than that</p></li><li><p><strong>General disorganization</strong>: GraphQL endpoints are built on user defined schemas that clearly show what fields are available and how to work with them</p></li></ul><p>This is obviously the simple version of the story, but the ideas hold: GraphQL is growing <em>really</em> fast, and an entire ecosystem of supporting tools has been developing over the past few years.</p><h2><strong>Schemas, resolvers, and introspection</strong></h2><p>GraphQL doesn&#8217;t magically learn how your endpoints work: you need to explicitly define how it&#8217;s supposed to find the data it needs. If you&#8217;ve got an endpoint that returns a user&#8217;s profile data (like in our Twitter example), you tell GraphQL that when you ask for &#8220;name&#8221; and &#8220;followers&#8221; it should go to that endpoint to get them. These series of functions are called <strong>Resolvers</strong> and <a href="https://graphql.org/learn/execution/">you need to set them up</a> for any fields you want to access.</p><p>As you set up Resolvers for all of your data points, you&#8217;re basically documenting how your endpoints work - and GraphQL takes advantage of that with <strong><a href="https://graphql.org/learn/schema/">Schemas</a></strong> and <strong><a href="https://graphql.org/learn/introspection/">Introspection</a></strong>. When you&#8217;re building your GraphQL endpoint, you define a schema: it&#8217;s just a list of all of the available fields, what types they are, and how they relate to each other. Here&#8217;s what a piece of a GraphQL schema might look like:</p><pre><code>type Starship {
  id: ID!
  name: String!
  length(unit: LengthUnit = METER): Float
}</code></pre><p>A full GraphQL implementation will have this information for every available field, and it&#8217;s super clutch: it&#8217;s basically like an automatically evolving set of documentation. If you want to get details on any data, you can introspect with a query that returns the available data types and fields:</p><pre><code>{
  __type(name: "Starship") {
    name
    fields {
      name
      type {
        name
        kind
      }
    }
  }
}
</code></pre><blockquote><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p><p>Schemas and introspection can get confusing: the way it works is that you define a schema, and then can introspect that schema (i.e. use it, look at it) through GraphQL queries.</p><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p></blockquote><p>There&#8217;s a lot going on here, which is why GraphQL typically needs to run on its own server. Popular JS frameworks and middleware like <a href="https://expressjs.com/">Express.js</a> already have <a href="https://github.com/graphql/express-graphql">GraphQL extensions</a> that make GraphQL simpler to add to your existing setup. But as GraphQL has gotten more and more popular, developers are starting to reorganize their entire architectures around it. <a href="https://fauna.com/">Fauna</a> is a database that supports GraphQL natively (this is a big deal), and <a href="https://www.apollographql.com/">Apollo</a> and <a href="https://www.prisma.io/">Prisma</a> provide layers above databases and APIs for smoother GraphQL integration. It&#8217;s still early, but things are moving fast.</p><h2><strong>Terms and concepts covered</strong></h2><pre><code>GraphQL</code></pre><pre><code>Resolvers</code></pre><pre><code>Schema</code></pre><pre><code>Introspection</code></pre><h2><strong>Further reading</strong></h2><ul><li><p>Because using GraphQL spans the whole stack, tools like Apollo help with a lot, and they can be hard to understand. <a href="https://flaviocopes.com/apollo/">This primer can help</a></p></li><li><p><a href="https://2019.stateofjs.com/data-layer/graphql/">The State of JS 2019 Survey</a> has a lot of interesting data about GraphQL, Apollo, and JS in general</p></li><li><p>You can <a href="https://retool.com/blog/the-best-graphql-ides-and-their-features/">query GraphQL in specialized IDEs</a> that help format queries and introspect schemas</p></li></ul><p></p>]]></content:encoded></item><item><title><![CDATA[What does Elastic do?]]></title><description><![CDATA[Yet another database! feat. search]]></description><link>https://technically.substack.com/p/what-does-elastic-do</link><guid isPermaLink="true">https://technically.substack.com/p/what-does-elastic-do</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Mon, 28 Feb 2022 18:30:38 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F2d853e85-d660-42f8-adbe-db58daf93451_1600x1000.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p><em>Apologies for the delay on this one. I was going to publish last week but felt given the circumstances it was better to wait it out a bit. We&#8217;ve got some really exciting stuff coming over the next couple of months, including a guide for how to get more technical, along with posts about WebAssembly, GraphQL, Data Lakes, and ORMs.</em></p><h2><strong>The TL;DR</strong></h2><p><a href="https://www.elastic.co/">Elastic</a> is the commercial company behind Elasticsearch, a popular open source database for storing and searching unstructured data.</p><ul><li><p>Companies collect loads of <strong>unstructured data</strong> in the form of logs, requests, sessions, server metrics, etc.</p></li><li><p>Elasticsearch is a <strong>database</strong> to store that data, and a <strong>search engine</strong> to easily comb through it</p></li><li><p>Unlike MongoDB or MySQL, Elasticsearch is an <strong>analytical database</strong>, not a production one</p></li><li><p>Elasticsearch is commonly used with <strong>Kibana</strong>, its sister <strong>data visualization tool</strong></p></li></ul><p>Elasticsearch is a highly popular option for use cases around log management, typically for larger companies. The company behind the open source software <a href="https://www.cnbc.com/2018/10/05/elastic-estc-ipo-stock-makes-debut-on-nyse.html">went public</a> back in 2018 and did around $400M in revenue in 2020.</p><h2><strong>Another database? Some taxonomy</strong></h2><p>Yet another database!? Yes, my dear readers, another database. But Elasticsearch isn&#8217;t like other databases; it&#8217;s <strong>use case specific</strong>, meaning it was designed for doing specific things with particular types of data. One of its flagship features is also <strong>built-in search</strong> (hence the name), which is now becoming common in the NoSQL database world, but was novel when it first released. To understand <em>any database</em>, you first need to understand why teams use it, and it&#8217;s there we begin this installment of Technically.</p>
      <p>
          <a href="https://technically.substack.com/p/what-does-elastic-do">
              Read more
          </a>
      </p>
   ]]></content:encoded></item><item><title><![CDATA[What's Reverse ETL?]]></title><description><![CDATA[Getting your data OUT of your warehouse?]]></description><link>https://technically.substack.com/p/whats-reverse-etl</link><guid isPermaLink="true">https://technically.substack.com/p/whats-reverse-etl</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 01 Feb 2022 18:05:41 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae6f89e-a508-4afa-9ee6-c159b59d542b_672x346.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p>Reverse ETL is the process of syncing data <strong>from your data warehouse to your business tools</strong> like Salesforce and Hubspot.&nbsp;</p><ul><li><p>Data teams spend their time organizing data into a <strong>centralized warehouse</strong></p></li><li><p>It&#8217;s operational teams, though, like sales and marketing, who <strong>need to use that data in their day to day SaaS tools</strong></p></li><li><p>Reverse ETL is the process of <strong>moving data from the warehouse into those tools </strong>so operational teams can take action on it</p></li><li><p>It&#8217;s called reverse ETL because the data is <em><strong>leaving</strong></em><strong> the warehouse</strong></p></li></ul><p>As the so-called &#8220;modern data stack&#8221; has consolidated around centralized cloud warehouses like <a href="https://www.snowflake.com/">Snowflake</a> and <a href="https://cloud.google.com/bigquery">BigQuery</a>, the process of reverse ETL-ing that data into SaaS tools has gotten easier, and tools like <a href="https://www.getcensus.com/">Census</a> offer it as a simple SaaS service.</p><h2><strong>What kind of data is in the warehouse?</strong></h2><p>One of the confusing pieces of reverse ETL is understanding what, exactly, is <em>in</em> the data warehouse and where it comes from. For a refresher on what data warehouses are, check out <a href="https://technically.substack.com/p/whats-a-data-warehouse">the original Technically post here</a>. Every warehouse setup is different, but you should expect to see some combination of:</p><ul><li><p><strong>User data</strong></p></li></ul><p>Every app has a <code>users</code> table in their <a href="https://technically.substack.com/p/the-details-production-databases">production database</a>, and that usually forms the foundation for the kind of data you&#8217;ll have about your users in the warehouse. Common attributes include when the user signed up, their email address, their name, the company they work at, and sometimes high level activity data like the last time they signed in.&nbsp;</p><ul><li><p><strong>Product usage data</strong></p></li></ul><p>What users are doing in your tool is some of the most valuable analytics data you can capture. Teams tend to track this in terms of <strong>events</strong>. The code powering your app records an &#8220;event&#8221; every time a user clicks on a specific button, navigates to a particular page, or does anything of note in the product; those events then get sent to the data warehouse for future analysis. You can roll up this data to answer questions like what percentage of your users tried a specific feature.</p><ul><li><p><strong>Marketing and attribution data</strong></p></li></ul><p>In the same vein as product events, data teams collect information about which website pages users visit, what source referred them to the site (a podcast sponsorship? Google Search?), and the &#8220;journey&#8221; they took across marketing materials before signing up. This helps marketing teams understand which channels are performing well and where to allocate spend.</p><ul><li><p><strong>Payment and billing data</strong></p></li></ul><p>Data on which plans users and teams are on &#8211; as well as how much they&#8217;re paying on a monthly basis &#8211; helps teams understand where revenue is coming from and what activity it might be tied to. Some of this comes from your own systems, and some comes from payment <a href="https://technically.substack.com/p/whats-an-api">APIs</a> like <a href="https://technically.substack.com/p/what-does-stripe-do">Stripe</a>.</p><div><hr></div><p>No matter what kind of data we&#8217;re talking about, all of it gets <em>into</em> the warehouse via ETL (or ELT), a process that <a href="https://technically.substack.com/p/whats-etl">Technically has covered extensively here</a>. Data teams spend their time taking source data, modeling it to make it useful for analytics, and depositing it in the data warehouse. Getting data into the warehouse in a useful format is one of the key responsibilities of a data team!</p><p>But <strong>reverse ETL</strong> is the opposite: getting it <em>out </em>of the warehouse and <em>into</em> your team&#8217;s SaaS tools.</p><h2><strong>Data needs to be in context</strong></h2><p>Companies run operationally on some <a href="https://future.a16z.com/excel-in-tech-without-learning-to-code/">hacked together combination</a> of SaaS tools. Each team uses different tools, but the theme is the same: they all need user and activity data to be useful. Let&#8217;s start with a few examples:</p><p><strong>&#8594; Sales</strong></p><p>Most sales teams use <a href="https://www.salesforce.com/">Salesforce</a> as their system of record and central hub for operations. Salesforce tracks all of your open opportunities and accounts, lets you move companies between stages (e.g. prospect &#8594; customer), automatically pulls in email data, allows teams to build pipeline reports...there&#8217;s a lot you can do in there.&nbsp;</p><p><strong>&#8594; Marketing</strong></p><p>Marketing teams use a CRM, too: usually <a href="https://www.hubspot.com/">Hubspot</a> or <a href="https://www.marketo.com/">Marketo</a>. These tools allow teams to track all of their leads, organize them into groups, and send targeted email campaigns at specific times based on triggers. If you&#8217;ve signed up for a product and gotten a welcome email a day later, that was probably sent using one of these tools.</p><p><strong>&#8594; Support</strong></p><p>Support teams use tools like <a href="https://www.intercom.com/">Intercom</a> and <a href="https://www.zendesk.com/">Zendesk</a> to track all open tickets and requests, as well as communicate with customers through email or chat. These tools let teams triage and organize open tickets into statuses, collaborate with other team members (e.g. tag a coworker who might know the answer), and send CSAT surveys among other things.</p><p>Even though all of these tools generate and manage their own data, they become a lot more useful when you can pull in external data about your users from the data warehouse. Back to our examples:</p><ul><li><p><strong>Sales</strong> &#8211; product usage data</p><ul><li><p>E.g. how much time has this user spent in the product? What features have they used? How many team members are active?</p></li><li><p>Helps qualify prospects, allocate time more effectively</p></li></ul></li><li><p><strong>Marketing</strong> &#8211; demographic data</p><ul><li><p>E.g. how many employees work at this company? When they signed up, what did they say they were going to use the product for?</p></li><li><p>Helps build useful groups and target messaging / drip campaigns</p></li></ul></li><li><p><strong>Support</strong> &#8211; payment data</p><ul><li><p>E.g. what plan is this customer on? How long have they been paying? How large is the account?</p></li><li><p>Helps prioritize support for more mission critical accounts</p></li></ul></li></ul><p>These are illustrative: teams get creative and you never know what kinds of data are going to be valuable in different contexts. The important part is that the data needs to be <em>in </em>the tool that the team uses to take <strong>action</strong>.</p><h2><strong>How Reverse ETL works</strong></h2><p>Now you know what kind of data is usually in a warehouse, and that it&#8217;s important to be able to get that data out of the warehouse and into your team&#8217;s operational SaaS tools. <strong>Reverse ETL</strong> is the process of making that happen. Another way of thinking about it is that Reverse ETL lets you operationalize your data, which is just a fancy way of saying you can actually use your data for day-to-day actions and decisions vs. sending it into a dashboard that&#8217;ll get stale in a couple weeks.&nbsp;</p><p><strong>&#8594; SaaS tools have databases you can use</strong></p><p>All of the aforementioned tools &#8211; Salesforce, Hubspot, etc. &#8211; allow you to send data to them that they&#8217;ll store for you and surface in the tool&#8217;s UI. They usually expose this functionality via a set of <a href="https://technically.substack.com/p/whats-an-api">APIs</a> &#8211; like <a href="https://developer.salesforce.com/docs/atlas.en-us.object_reference.meta/object_reference/custom_fields.htm">this one from Salesforce</a>. Once you get data in, you&#8217;ll see it in context when you&#8217;re using the tool. Here&#8217;s an example from Intercom that you&#8217;d see next to a support conversation with a user:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae6f89e-a508-4afa-9ee6-c159b59d542b_672x346.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae6f89e-a508-4afa-9ee6-c159b59d542b_672x346.png" width="672" height="346" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/4ae6f89e-a508-4afa-9ee6-c159b59d542b_672x346.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:346,&quot;width&quot;:672,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae6f89e-a508-4afa-9ee6-c159b59d542b_672x346.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae6f89e-a508-4afa-9ee6-c159b59d542b_672x346.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae6f89e-a508-4afa-9ee6-c159b59d542b_672x346.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F4ae6f89e-a508-4afa-9ee6-c159b59d542b_672x346.png 1456w" sizes="100vw"></a></figure></div><p>Whoever set this up is pulling data on the company&#8217;s internal ID, their team size, their monthly spend (they&#8217;re not spending anything!), and their website, which is also unknown. They used Intercom&#8217;s API to get this data into Intercom&#8217;s systems, and now they can use it side by side with the tool. The data you&#8217;re seeing here got to where it is via Reverse ETL.</p><p><strong>&#8594; Wave 1: build reverse ETL from scratch</strong></p><p>Until recently, state of the art was to do reverse ETL manually. To logistically get data from your warehouse into SaaS tools, you need to set up some sort of recurring job that pulls data out and uses the SaaS tool&#8217;s APIs to get it into their systems. The APIs will require that data fits a specific format, so you&#8217;ll likely need to transform it in flight. You&#8217;d also need to set up reporting and a retry scheme for when errors happen, because errors will happen.</p><blockquote><p><strong>&#128269;  Deeper Look</strong><em><strong> </strong></em><strong>&#128269;</strong></p><p>The process of building reverse ETL pipelines from scratch actually very closely mirrors <a href="https://technically.substack.com/p/the-details-etl">building normal ETL pipelines</a> from scratch to get data <em>into</em> your warehouse. The doubly annoying thing here is that each destination &#8211; i.e. the APIs of your SaaS tools &#8211; require data in slightly different formats and configurations, which means each pipeline needs to be customized.</p><p><strong>&#128269;  Deeper Look</strong><em><strong> </strong></em><strong>&#128269;</strong></p></blockquote><p>In case my phrasing didn&#8217;t make it obvious, this is kind of a pain in the ass, especially since APIs and formats change over time. A few years ago, purpose built tools started popping up to make things easier.</p><p><strong>&#8594; Wave 2: purpose built SaaS for reverse ETL</strong></p><p>Today, you can use something like <a href="https://www.getcensus.com/">Census</a> or <a href="https://hightouch.io/">Hightouch</a> to do reverse ETL for you pretty easily &#8211; you just need to do a little up front configuration. These tools connect to your <strong>sources </strong>(data warehouse and others), your <strong>destinations</strong> (Salesforce, Hubspot, etc.) and let you easily move data between them using SQL. You can also create <a href="https://docs.getcensus.com/basics/core-concept#building-models">models</a> that organize your data and prep it for the format your tools want to intake it in.</p><p>A common use case might be to sync your marketing attribution data from your warehouse to Hubspot once a day. Census will let you schedule that sync, transform the data if you need to in advance, and show you a history of how each sync went:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb5ff0004-1ce4-4a21-8ead-888c4ff977de_1600x542.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb5ff0004-1ce4-4a21-8ead-888c4ff977de_1600x542.png" width="1456" height="493" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/b5ff0004-1ce4-4a21-8ead-888c4ff977de_1600x542.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:493,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb5ff0004-1ce4-4a21-8ead-888c4ff977de_1600x542.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb5ff0004-1ce4-4a21-8ead-888c4ff977de_1600x542.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb5ff0004-1ce4-4a21-8ead-888c4ff977de_1600x542.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb5ff0004-1ce4-4a21-8ead-888c4ff977de_1600x542.png 1456w" sizes="100vw"></a></figure></div><p>Behind the scenes, they&#8217;re taking care of running queries against your warehouse, transforming that data on the fly, and hitting the APIs of your SaaS tools to regularly insert and update the data you want.</p><h2>Further reading</h2><ul><li><p>Census&#8217;s <a href="https://blog.getcensus.com/what-is-reverse-etl/">explainer on Reverse ETL</a></p></li><li><p>A <a href="https://blog.panoply.io/best-reverse-etl-tools">roundup of Reverse ETL tools</a></p></li><li><p>Benn Stancil&#8217;s post about <a href="https://benn.substack.com/p/entity-layer">the warehouse as a platform</a></p></li></ul>]]></content:encoded></item><item><title><![CDATA[What does New Relic do?]]></title><description><![CDATA[Keeping an eye on your servers and apps]]></description><link>https://technically.substack.com/p/what-does-newrelic-do</link><guid isPermaLink="true">https://technically.substack.com/p/what-does-newrelic-do</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 11 Jan 2022 17:30:41 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F732528a8-2457-4190-a3d9-8371da025231_1600x898.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p><a href="https://newrelic.com/">New Relic</a> is <strong>observability software</strong>: teams use it to monitor the performance of their applications and infrastructure.</p><ul><li><p>Part of developing a successful application is making sure it <strong>stays up and running </strong>after you build it</p></li><li><p>The two main areas teams need visibility into are the <strong>application layer </strong>(APM) and the <strong>infrastructure layer </strong>(your servers and such)</p></li><li><p>New Relic provides a series of APIs for <strong>collecting data </strong>from those layers, <strong>visualizing it</strong>, and <strong>digging deeper</strong> into why things went wrong</p></li></ul><p>New Relic was one of the first commercially available SaaS products for monitoring (targeted at developers), originally founded in 2008. They <a href="https://newrelic.com/press-release/20141211">went public in 2014</a> and today are worth around $7B.</p><h2><strong>A brief, brief history of deployment</strong></h2><p>Every app that you use on the internet is <a href="https://technically.substack.com/p/whats-cloud">running on a server somewhere</a>. Until recently, that used to literally mean one server - a giant computer - so you had whatever computing power you had, and you had one place to look if you wanted to know why things were broken &#8211; or worse, why things were slow. There were basic utilities in Linux &#8211; the standard server operating system &#8211; for monitoring a lot of this stuff, like <a href="https://www.geeksforgeeks.org/htop-command-in-linux-with-examples/#:~:text=htop%20command%20in%20Linux%20system,server's%20processes%20in%20real%20time.&amp;text=htop%20supports%20mouse%20operation%2C%20uses,processor%2C%20memory%20and%20swap%20usage.">the htop command</a> &#8211; which is still used a lot, mind you &#8211; but this was mostly a reactive process. Something would go wrong, and you&#8217;d check why.&nbsp;</p><p>Then a few things changed:</p><ol><li><p><strong>Infrastructure got easier, but more complicated</strong></p></li></ol><p>The one-app-one-server paradigm is not very true anymore. Most major apps now run as distributed systems, or&nbsp; a set of multiple, interconnected servers. It is obviously <a href="https://www.splunk.com/en_us/data-insider/what-is-distributed-tracing.html">harder to debug many servers</a> than it is to debug one server; but that&#8217;s only part of the problem.</p><p>With everything running on <a href="https://technically.substack.com/p/whats-docker-and-what-are-containers">Docker</a>, the concept of &#8220;servers&#8221; got a lot more complicated, because there was a thick layer of abstraction between your code and what infrastructure it was running on. Docker creates a standalone container on your servers; now, something can be wrong with your server <em>or</em> that container, or even the relationship between the two.&nbsp;</p><p>And in addition to that increased surface area, it also meant nicher things to worry about, like your <a href="https://technically.substack.com/p/whats-kubernetes">Kubernetes cluster</a> having a hard time restarting pods. New approaches to infrastructure &#8211; as well as new layers for managing that infrastructure &#8211; means monitoring is much more complex than it used to be.&nbsp;&nbsp;</p><ol start="2"><li><p><strong>The internet got bigger</strong>&nbsp;</p></li></ol><p>As the internet became widely available, apps are now used by like, billions of people. So when 2 billion people are loading Facebook.com every hour as opposed to 200, a lot more things can go wrong, both in terms of surface area (bigger products) and in terms of having just <em>so many</em> people hitting your servers. Supporting an app that&#8217;s trying to handle hundreds of millions of requests per second is <em>very</em> different from one that&#8217;s handling thousands. And in addition to that, it&#8217;s more and more important to fix things quickly, since there are always a lot of people trying to use what&#8217;s broken.</p><ol start="3"><li><p><strong>Everything moved to the cloud</strong></p></li></ol><p>The last important change to keep in mind: most apps you access today are sending data across the web, instead of running on your company&#8217;s local data center. The cloud is great! Companies can get set up way faster, for much cheaper (initially), and get access to the fastest and best infrastructure around. But it <em>also</em> means that every single request you make from your browser &#8211; be it to fetch your emails or send a tweet &#8211; has to travel over the public web, instead of across little internal wires. That makes performance much more unpredictable; and doubly important to measure.&nbsp;</p><p>So in summary, developers were faced with more complex infrastructure <em>and</em> more pressure to understand, monitor, and keep that infrastructure running smoothly. This is part of why <a href="https://technically.substack.com/p/whats-devops">DevOps</a> (development operations) started to become its own discipline &#8211; companies were employing teams of developers <em>just to deploy and monitor infrastructure</em>.&nbsp;</p><h2><strong>What teams are actually monitoring</strong></h2><p>To understand New Relic, you need to understand what monitoring is. Building your app is far from the finish line: once you get it out to your users, there&#8217;s an entire series of workflows around making sure it continues working, and that it&#8217;s <em>fast</em>.</p><p>There are two big pieces to modern application / infrastructure monitoring: your application and your infrastructure (i.e. both sides of the slash).&nbsp;</p><ol><li><p><strong>Infrastructure monitoring</strong></p></li></ol><p>Infrastructure monitoring is keeping an eye on any metrics that relate to non-application data. The easiest place to start is the actual server hardware that your app is running on, but it extends beyond that to things like Docker or your network performance.</p><p>Starting with <a href="https://technically.substack.com/p/what-are-computers">your server</a>, there are a few metrics you want to keep an eye on to make sure everything is running smoothly:</p><ul><li><p><strong>CPU</strong> &#8211; how much processing your server is doing as a function of its total processing power (e.g. 3 out of 4 CPUs)</p></li><li><p><strong>RAM</strong> - how much memory your server is using (e.g. 3GB/4GB memory)</p></li><li><p><strong>Disk</strong> - how much storage your server is using (e.g. 450GB/500GB stored)</p></li><li><p><strong>IO</strong> - how fast your server is reading and writing things from memory and disk</p></li></ul><p>Keep in mind that most popular modern applications run on distributed systems, so there&#8217;s likely way more than just one server involved. That means you need to keep an eye on metrics like these for <em>all</em> of those servers, and frameworks have evolved to do that for you automatically.&nbsp;</p><blockquote><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p><p>Observability isn&#8217;t just about <em>identifying</em> when things go wrong; it&#8217;s also about figuring out <em>why</em> they went wrong, and, of course, how to fix them. The answer usually lies in logs, which are little bits of text your app and infrastructure spit out when they do anything: like &#8220;hey we&#8217;re starting up&#8221; or &#8220;hey this specific thing went wrong.&#8221; And this is why monitoring tools are usually tightly coupled with log storage and management tools.</p><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p></blockquote><p>Beyond servers, teams will monitor other parts of their infrastructure. How much data is your database storing, and how much space is left? How long does it take for your Docker containers to build? How long does it take for different servers to speak to each other? These are all questions that developers want to be able to answer quickly and consistently.&nbsp;</p><ol start="2"><li><p><strong>Application monitoring</strong></p></li></ol><p>Even with the most performant, 100% perfect infrastructure, you&#8217;re not guaranteed to have a high performing app: things can go wrong for any number of reasons. <a href="https://technically.substack.com/p/whats-a-web-app">Recall that a modern app</a> consists of a frontend &#8211; the visual, interactive part made up of HTML, CSS, and JavaScript &#8211; and a backend, which deals with the data and logic backing that frontend. Things can go wrong with both of those things, and even in the interaction between them. Some common use cases:</p><ul><li><p><strong>Request performance</strong>: how quickly are your API endpoints responding?</p></li><li><p><strong>Error monitoring</strong>: are you getting HTTP errors on your requests? Is your code erroring out? If so, what kinds of errors? When are they happening?</p></li><li><p><strong>Frontend load times</strong>: how quickly is your app loading? Are interactions from your users quick?</p></li></ul><p>In some cases, issues with these metrics can relate to underlying issues with your app&#8217;s infrastructure. But many times they&#8217;re localized issues that need fixing, like your code not being able to handle weird edge cases.&nbsp;</p><h2><strong>The core New Relic product</strong></h2><p>With that <em>extensive</em> background in mind, you&#8217;re set up to understand what New Relic does. In short, they offer a comprehensive set of tools for all of the monitoring that developers need, from application to infrastructure and beyond. <a href="https://technically.substack.com/p/what-does-datadog-do">Datadog</a> is a useful comparison.</p><p>Here&#8217;s how it works:</p><ol><li><p><strong>Install New Relic&#8217;s agents on whatever you want to monitor</strong></p></li></ol><p>To gather the data you want to look at, you need to install some New Relic code &#8211; referred to as an <em>agent</em> &#8211; on any property you want to monitor. For infrastructure level items, this is pretty straightforward: New Relic provides easy to install agents for <a href="https://docs.newrelic.com/docs/kubernetes-pixie/kubernetes-integration/installation/kubernetes-integration-install-configure/">Kubernetes</a>, <a href="https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/linux-installation/install-infrastructure-monitoring-agent-linux/">Linux</a>, <a href="https://docs.newrelic.com/docs/infrastructure/amazon-integrations/get-started/connect-aws-new-relic-infrastructure-monitoring/">AWS services</a>, and even mobile platforms like <a href="https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/installation/ios-manual-installation/">iOS</a>. Some configuration is required, but it&#8217;s mostly out of the box.</p><p>For application level stuff, you need to write some code. New Relic provides an SDK (a set of APIs) for picking which pieces of your application you want to monitor and how. For basic stuff like HTTP requests, these agents work out of the box, but you can also add <a href="https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/">custom instrumentation</a> for however you want to monitor your app.&nbsp;</p><ol start="2"><li><p><strong>Build dashboards and visualizations</strong></p></li></ol><p>Once your agents are installed and data is flowing, you can basically do whatever you want with it. Teams will usually build dashboards that pull together different data sources:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F732528a8-2457-4190-a3d9-8371da025231_1600x898.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F732528a8-2457-4190-a3d9-8371da025231_1600x898.png" width="1100" height="617" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/732528a8-2457-4190-a3d9-8371da025231_1600x898.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:617,&quot;width&quot;:1100,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F732528a8-2457-4190-a3d9-8371da025231_1600x898.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F732528a8-2457-4190-a3d9-8371da025231_1600x898.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F732528a8-2457-4190-a3d9-8371da025231_1600x898.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F732528a8-2457-4190-a3d9-8371da025231_1600x898.png 1456w" sizes="100vw"></a></figure></div><p>These dashboards are usually a combination of numerical data &#8211; how many errors have we seen on the frontend? How long are requests taking? &#8211; as well as aggregated data about logs and performance over time. Note that New Relic is actually storing the data they&#8217;re collecting on their servers, which is part of their value proposition; you&#8217;d need to store it yourself otherwise.</p><ol start="3"><li><p><strong>Dig deeper with traces and logs</strong></p></li></ol><p>Monitoring isn&#8217;t just about <em>knowing</em> when things aren&#8217;t working; it&#8217;s also about making it easier to fix those things. So what exactly do you do when you see that your app is running into issues? Well, Sherlock, you&#8217;ll investigate, and the most common place to look is logs, bits of text that your application / infrastructure spit out whenever they do anything. If you&#8217;re seeing elevated error rates, you&#8217;ll check what those errors actually are, where they&#8217;re coming from, etc.</p><p>Note that you don&#8217;t <em>need</em> to use <a href="https://newrelic.com/products/log-management">New Relic for storing logs</a> just because you&#8217;re using them for APM and infrastructure monitoring (you could use Elastic, Splunk, etc.), but choosing the same platform for both of these does have its benefits.</p><h2><strong>Other New Relic goodies</strong></h2><p>Beyond the standard monitoring workflow (above), New Relic has expanded the product suite to include a lot more DevOps related stuff. A few examples:</p><ol><li><p><strong>Browser monitoring</strong></p></li></ol><p>As any developer will tell you, creating web apps for the hundreds of different browser versions out there is a huge pain in the ass. What you developed locally using Chrome might render slightly differently on a version of Safari from 2 years ago, which a big customer happens to be using (there are entire companies like <a href="https://www.browserstack.com/cross-browser-testing">BrowserStack</a> that exist to help with this). <a href="https://newrelic.com/products/browser-monitoring">New Relic&#8217;s browser monitoring product</a> helps track common metrics like page load time, time spent on page, visual stability, and errors.</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F28a20319-d054-426f-bca4-af3b7d3b6f91_1200x750.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F28a20319-d054-426f-bca4-af3b7d3b6f91_1200x750.png" width="1100" height="688" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/28a20319-d054-426f-bca4-af3b7d3b6f91_1200x750.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:688,&quot;width&quot;:1100,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F28a20319-d054-426f-bca4-af3b7d3b6f91_1200x750.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F28a20319-d054-426f-bca4-af3b7d3b6f91_1200x750.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F28a20319-d054-426f-bca4-af3b7d3b6f91_1200x750.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F28a20319-d054-426f-bca4-af3b7d3b6f91_1200x750.png 1456w" sizes="100vw"></a></figure></div><ol start="2"><li><p><strong>AI for monitoring</strong></p></li></ol><p>We live in an era of AI for everything, and monitoring is no exception. <a href="https://newrelic.com/platform/applied-intelligence">New Relic&#8217;s applied intelligence product</a> will automatically analyze your performance data to find common errors and root causes. I think of this as a nice to have side feature, and it comes free with New Relic&#8217;s normal pricing.</p><ol start="3"><li><p><strong>Workflows in your IDE</strong></p></li></ol><p><a href="https://techcrunch.com/2021/10/21/newrelic-acquires-codestream-to-provide-chat-in-developer-environments-inks-microsoft-ide-partnership/?guccounter=1&amp;guce_referrer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8&amp;guce_referrer_sig=AQAAACYXMCkWlQeoFcGxFA8FKuuycX0YBBHPJm-pv2E9vNKUjWghMSjE0agTQ757W5KG3GrpzEwamizmD9JqzM8xXq4AvPMqItdeHPgfsY1dpW1yeVxeo9x40mxR4llPgVID-FRpQoJ0J898ync5otysUiRPyrk_DrGptoJ8sET6etRD">New Relic bought CodeStream</a> in October of 2021 and integrated it into the product suite pretty quickly. The gist is basically moving a lot of the stuff you&#8217;d be doing in GitHub or the New Relic UI into your development environment of choice, which for more people is VSCode. There&#8217;s a lot you can do with it. One popular use case is bringing comments on your <a href="https://technically.substack.com/p/whats-version-control-and-github">pull requests</a> into your IDE directly:&nbsp;</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fea642ab8-7425-4529-81ae-327ff581b820_600x415.gif"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fea642ab8-7425-4529-81ae-327ff581b820_600x415.gif" width="600" height="415" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/ea642ab8-7425-4529-81ae-327ff581b820_600x415.gif&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:415,&quot;width&quot;:600,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fea642ab8-7425-4529-81ae-327ff581b820_600x415.gif 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fea642ab8-7425-4529-81ae-327ff581b820_600x415.gif 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fea642ab8-7425-4529-81ae-327ff581b820_600x415.gif 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fea642ab8-7425-4529-81ae-327ff581b820_600x415.gif 1456w" sizes="100vw"></a></figure></div><p><em>Source: <a href="https://techcrunch.com/2018/11/16/codestream-lets-you-collaborate-and-talk-directly-in-vs-code/">TechCrunch</a></em></p><p>There are some basic VSCode extensions that let you do this already, but CodeStream was pretty popular for more advanced stuff. A <a href="https://docs.newrelic.com/docs/errors-inbox/errors-inbox/#connect-errors-inbox-to-codestream">nice thing you can do</a> with this integration is find an error with your app in the NewRelic UI, click on it, and go directly to the offending code in your IDE instead of having to search for it manually.</p><p>The idea with all of this stuff is to be the one stop shop for observability. And the market is<em> </em>getting tougher with large, established options like <a href="https://www.dynatrace.com/">Dynatrace</a>, <a href="https://www.splunk.com/">Splunk</a>, <a href="https://grafana.com/">Grafana</a>, <a href="https://www.sumologic.com/">SumoLogic</a>, <a href="https://www.elastic.co/">Elastic</a>, etc. We&#8217;ll see where things go!</p>]]></content:encoded></item><item><title><![CDATA[What does GitLab do?]]></title><description><![CDATA[The TL;DR GitLab is a somewhat contrarian take on DevOps: it&#8217;s basically one giant tool for literally anything you&#8217;d want to do relating to building and deploying software. DevOps spans the gamut in software, from source control to performance monitoring]]></description><link>https://technically.substack.com/p/what-does-gitlab-do</link><guid isPermaLink="true">https://technically.substack.com/p/what-does-gitlab-do</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 04 Jan 2022 18:50:45 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F6e36d472-043b-4688-97a9-fd3fcf316aff_1450x639.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p>GitLab is a somewhat contrarian take on <a href="https://technically.substack.com/p/whats-devops">DevOps</a>: it&#8217;s basically one giant tool for literally anything you&#8217;d want to do relating to building and deploying software.</p><ul><li><p>DevOps <strong>spans the gamut</strong> in software, from source control to performance monitoring</p></li><li><p>Traditionally, teams have used <strong>different tools</strong> for each part of the DevOps pipeline</p></li><li><p>GitLab brings the entire process together with a <strong>single platform</strong> for DevOps</p></li><li><p><strong>Product lines</strong> include source control, issue tracking, CI/CD, and monitoring</p></li></ul><p>GitLab is a <em>very</em> non-traditional company &#8211; beyond their unusual approach to the market, they operate completely remotely, publicly <a href="https://about.gitlab.com/company/culture/">publish their internal guidelines</a>, and are open source. They also <a href="https://www.cnbc.com/2021/10/14/gitlab-jumps-in-nasdaq-debut-after-pricing-ipo-above-expected-range.html">IPOd recently</a>, and are now worth $15B &#8211; so it&#8217;s an organization worth understanding.</p><h2><strong>Refresher: what&#8217;s DevOps?</strong></h2><p>Understanding GitLab means understanding DevOps, which is thankfully the subject of <a href="https://technically.substack.com/p/whats-devops">this recent Technically post</a>. Here&#8217;s a quick refresher if you can&#8217;t be bothered to click.</p><p>Much of the tedious process of building software is actually what happens <em>after</em> you write working code: testing that code to make sure it&#8217;s going to work for your users, and then actually getting it out there into the wild, and monitoring it to make sure it&#8217;s performing well. These three pieces are often categorized as:</p>
      <p>
          <a href="https://technically.substack.com/p/what-does-gitlab-do">
              Read more
          </a>
      </p>
   ]]></content:encoded></item><item><title><![CDATA[The top 5 things PMs should know about engineering]]></title><description><![CDATA[A cross post extravaganza]]></description><link>https://technically.substack.com/p/the-top-5-things-pms-should-know</link><guid isPermaLink="true">https://technically.substack.com/p/the-top-5-things-pms-should-know</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Thu, 16 Dec 2021 17:48:14 GMT</pubDate><enclosure url="https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/91faf905-23bc-4189-98e2-095ba05cd769_256x256.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>Hello loyal and savvy readers of this fine newsletter. Today&#8217;s issue is actually a cross post &#8211; I wrote for Lenny&#8217;s Newsletter about the top things that product managers should know about engineering, and being technical. Even if you&#8217;re not a PM, the 5 things that I cover in the post are relevant for anyone working with developers. So give it a read!</p><p>You can read the post here:</p><div class="embedded-post-wrap" data-attrs="{&quot;id&quot;:44350950,&quot;url&quot;:&quot;https://www.lennysnewsletter.com/p/the-top-5-things-pms-should-know&quot;,&quot;publication_id&quot;:10845,&quot;publication_name&quot;:&quot;Lenny's Newsletter&quot;,&quot;publication_logo_url&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/40b73d36-7447-4f52-83b5-4bbf44b9324a_1200x1200.png&quot;,&quot;title&quot;:&quot;The top 5 things PMs should know about engineering&quot;,&quot;truncated_body_text&quot;:&quot;&#128075; Hey, Lenny here! Welcome to the &#10024; bonus free edition &#10024; of my weekly newsletter. Each week I tackle reader questions about building product, driving growth, working with humans, and anything else that&#8217;s stressing you out about work. If you&#8217;re not a subscriber, here&#8217;s what you missed this month:&quot;,&quot;date&quot;:&quot;2021-12-16T16:05:40.278Z&quot;,&quot;like_count&quot;:5,&quot;comment_count&quot;:0,&quot;bylines&quot;:[{&quot;id&quot;:1849774,&quot;name&quot;:&quot;Lenny Rachitsky&quot;,&quot;photo_url&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/0b91f95f-0702-43e0-8f94-b105542e00d5_1080x1080.jpeg&quot;,&quot;bio&quot;:&quot;Writing &#8226; Angel investing &#8226; Advising&quot;,&quot;profile_set_up_at&quot;:&quot;2021-05-01T23:55:21.518Z&quot;,&quot;publicationUsers&quot;:[{&quot;id&quot;:247567,&quot;user_id&quot;:1849774,&quot;role&quot;:&quot;admin&quot;,&quot;public&quot;:true,&quot;is_primary&quot;:false,&quot;publication&quot;:{&quot;id&quot;:260150,&quot;name&quot;:&quot;Omaira's Newsletter&quot;,&quot;subdomain&quot;:&quot;omaira&quot;,&quot;custom_domain&quot;:null,&quot;custom_domain_optional&quot;:false,&quot;hero_text&quot;:&quot;Omaria's perspective on the world&quot;,&quot;logo_url&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/3e72504b-1dc3-4884-b304-8a2ce4fd6b86_80x80.png&quot;,&quot;author_id&quot;:1849774,&quot;theme_var_background_pop&quot;:&quot;#009B50&quot;,&quot;created_at&quot;:&quot;2021-01-11T23:19:37.606Z&quot;,&quot;rss_website_url&quot;:null,&quot;email_from_name&quot;:&quot;Omaira&quot;,&quot;copyright&quot;:&quot;Lenny Rachitsky&quot;,&quot;founding_plan_name&quot;:null,&quot;community_enabled&quot;:true,&quot;invite_only&quot;:false}},{&quot;id&quot;:247600,&quot;user_id&quot;:1849774,&quot;role&quot;:&quot;admin&quot;,&quot;public&quot;:true,&quot;is_primary&quot;:false,&quot;publication&quot;:{&quot;id&quot;:10845,&quot;name&quot;:&quot;Lenny's Newsletter&quot;,&quot;subdomain&quot;:&quot;lenny&quot;,&quot;custom_domain&quot;:&quot;www.lennysnewsletter.com&quot;,&quot;custom_domain_optional&quot;:false,&quot;hero_text&quot;:&quot;A weekly advice column about product, growth, working with humans, and anything else that&#8217;s stressing you out about work&quot;,&quot;logo_url&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/40b73d36-7447-4f52-83b5-4bbf44b9324a_1200x1200.png&quot;,&quot;author_id&quot;:1849774,&quot;theme_var_background_pop&quot;:&quot;#f47c55&quot;,&quot;created_at&quot;:&quot;2019-06-01T15:35:37.885Z&quot;,&quot;rss_website_url&quot;:null,&quot;email_from_name&quot;:&quot;Lenny's Newsletter&quot;,&quot;copyright&quot;:null,&quot;founding_plan_name&quot;:&quot;Extra generous supporter&quot;,&quot;community_enabled&quot;:true,&quot;invite_only&quot;:false}}],&quot;is_guest&quot;:false},{&quot;id&quot;:35943926,&quot;name&quot;:&quot;Justin Gage&quot;,&quot;photo_url&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/f27c0441-ff35-44b2-8207-38d5d728be7c_144x144.png&quot;,&quot;bio&quot;:&quot;latex salesman&quot;,&quot;profile_set_up_at&quot;:null,&quot;is_guest&quot;:true}],&quot;utm_campaign&quot;:null}"><a class="embedded-post" native="true" href="https://www.lennysnewsletter.com/p/the-top-5-things-pms-should-know?utm_source=substack&amp;utm_campaign=post_embed&amp;utm_medium=web"><div class="embedded-post-header"><img class="embedded-post-publication-logo" src="https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/40b73d36-7447-4f52-83b5-4bbf44b9324a_1200x1200.png"><span class="embedded-post-publication-name">Lenny's Newsletter</span></div><div class="embedded-post-title">The top 5 things PMs should know about engineering</div><div class="embedded-post-body">&#128075; Hey, Lenny here! Welcome to the &#10024; bonus free edition &#10024; of my weekly newsletter. Each week I tackle reader questions about building product, driving growth, working with humans, and anything else that&#8217;s stressing you out about work. If you&#8217;re not a subscriber, here&#8217;s what you missed this month&#8230;</div><span class="embedded-post-read-more">Read more</span><div class="embedded-post-meta">3 months ago &#183; 5 likes &#183; Lenny Rachitsky and Justin Gage</div></a></div>]]></content:encoded></item><item><title><![CDATA[The Details: CI]]></title><description><![CDATA[Standardized testing for your code]]></description><link>https://technically.substack.com/p/the-details-ci</link><guid isPermaLink="true">https://technically.substack.com/p/the-details-ci</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 30 Nov 2021 18:31:11 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa300b5c3-c81a-4d42-8e29-1d1496c2c8c2_789x567.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>Hello there, lovely subscribers. This week&#8217;s post is going to dive deeper into <strong>CI</strong>. We&#8217;re going to look at what types of tests developers run in CI, how they integrate with version control systems, and where teams set up CI (on your own server, or in the cloud).</p><p><a href="https://technically.substack.com/p/the-details-etl">The first &#8220;Details&#8221; post</a> covered ETL, and the most recent one covered <a href="https://technically.substack.com/p/the-details-data-warehouses">data warehouses</a>. As a reminder, if there are any topics you want to see me write about, just let me know! These details posts are for paid subscribers only.</p><h2><strong>Refresher: What is CI?</strong></h2><p><a href="https://technically.substack.com/p/whats-cicd">Continuous Integration and Continuous Delivery</a> (big words) are all about getting new code out into the wild as quickly and as securely as possible. CI is about the <em>secure</em> part &#8211; making sure that code is well tested and is going to perform on the stage exactly how you expect it to (or at least as close as we can get it).</p><p>Back in the day &#8211; especially before cloud delivered software became the norm &#8211; software upgrades were infrequent, difficult, and risky. It was hard to know if the new feature you built might cause something to break incidentally, and logistically, getting that new feature out to your users required some degree of coordination. Because of that, companies would <em>batch</em> new features and bug fixes together into big new releases.</p><p>As we started moving software to the cloud though, that all changed &#8211; upgrades started happening <strong>automatically and without notification</strong>. For example, when you&#8217;re using Gmail in your web browser, you&#8217;ll notice that Google is <em>constantly</em> changing and improving it, from how it looks to how you navigate around and even behind the scenes performance changes. You don&#8217;t click &#8220;update,&#8221; the stuff just continuously (see?) shows up.&nbsp;</p>
      <p>
          <a href="https://technically.substack.com/p/the-details-ci">
              Read more
          </a>
      </p>
   ]]></content:encoded></item><item><title><![CDATA[What's Headless E-Commerce?]]></title><description><![CDATA[We may be running out of names]]></description><link>https://technically.substack.com/p/whats-headless-e-commerce</link><guid isPermaLink="true">https://technically.substack.com/p/whats-headless-e-commerce</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 02 Nov 2021 16:30:05 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa7a53188-b4d0-4ca2-84fe-2005884cfccd_1456x745.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p>Headless e-commerce is like Shopify, but without most of the visuals you&#8217;re used to: it&#8217;s a pure backend and management portal for running and building shops on the web.&nbsp;</p><ul><li><p>Like any web app, e-commerce sites have two components: <strong>a frontend and a backend</strong></p></li><li><p>The frontend is what you <strong>see and interact with</strong>; the backend is the <strong>database and APIs</strong></p></li><li><p>Headless e-commerce gives you a <strong>pre-built, configurable backend</strong> for your store; think orders, customers, products, etc.</p></li><li><p>Things <strong>aren&#8217;t all code</strong> though: headless products usually give you some sort of admin portal for configuring your setup</p></li></ul><p>The headless concept isn&#8217;t new &#8211; you might have heard the term in the context of a headless CMS or <a href="https://technically.dev/posts/the-jamstack-and-the-startups-building-it">JAMStack apps</a>. Headless basically makes building, configuring, and maintaining your backend easy, while giving you the flexibility to make the frontend look like whatever you want.</p><h2><strong>Refresher: how apps are built</strong></h2><p>An ecommerce store on the web is just a type of web application, same as Gmail or Twitter. So to understand what &#8220;headless&#8221; means, we need to break down how a web app works. Today is your lucky day, as I&#8217;ve already <a href="https://technically.substack.com/p/whats-a-web-app">written about this at length here</a>. But because I, too, wouldn&#8217;t want to click that link, here&#8217;s a bit of context from that post.</p><p>Pretty&nbsp; much all applications out there exist in this paradigm of <strong>frontend</strong> and <strong>backend</strong>. Traditionally, here&#8217;s how the split works:</p><ul><li><p><strong>The frontend</strong> is what you see and interact with as a user: text, shapes, links, and all of that. It&#8217;s usually built in some combination of HTML, CSS, and JavaScript.</p></li><li><p><strong>The backend is the data and logic that powers that frontend: APIs, business logics, and a database. It&#8217;s usually built in a language like JavaScript, Python, Go, C++, etc.</strong></p></li></ul><p>This always confused me &#8211; and the metaphors that you see online didn&#8217;t help either &#8211; until I was able to break down an example. Let&#8217;s take a look at Twitter.com, which you can load in your browser (skipping over the mobile apps for now):</p><ul><li><p>Twitter&#8217;s <strong>frontend</strong> is the UI elements you see on the screen and how you interact with them. It&#8217;s built in HTML, CSS, and if I believe the internet, <a href="https://technically.substack.com/p/whats-react">React</a>.</p></li><li><p>Twitter&#8217;s<strong> backend</strong> stores all historical tweets, who you follow, what topics are trending, and anything data related. The frontend gets that data to you via API endpoints.</p></li></ul><p>Without the backend, Twitter&#8217;s frontend might look like this:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa7a53188-b4d0-4ca2-84fe-2005884cfccd_1456x745.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa7a53188-b4d0-4ca2-84fe-2005884cfccd_1456x745.png" width="1456" height="745" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/a7a53188-b4d0-4ca2-84fe-2005884cfccd_1456x745.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:745,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa7a53188-b4d0-4ca2-84fe-2005884cfccd_1456x745.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa7a53188-b4d0-4ca2-84fe-2005884cfccd_1456x745.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa7a53188-b4d0-4ca2-84fe-2005884cfccd_1456x745.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa7a53188-b4d0-4ca2-84fe-2005884cfccd_1456x745.png 1456w" sizes="100vw"></a></figure></div><p>Frontend isn&#8217;t just shapes and colors though; there&#8217;s plenty of important logic in there that <em>interacts with</em> the backend (like making API requests to get data). The reality is that the border between these two things isn&#8217;t exactly scientific, but it&#8217;s a useful framework for thinking about apps. It&#8217;s also how job postings are (sometimes) split:</p><ul><li><p><strong>Frontend engineers</strong> will work on the app&#8217;s UI, and use API endpoints that other engineers have already built</p></li><li><p><strong>Backend engineers work on building and maintaining API endpoints, the database, and other behind the scenes application or infrastructure logic</strong></p></li><li><p><strong>Full stack engineers do both! (the whole stack)</strong></p></li></ul><p>With this distinction in mind, let&#8217;s shift the conversation back into ecommerce. What does the split between frontend and backend look like there?</p><h2><strong>Frontends and backends in ecommerce</strong></h2><p>Like Twitter, most stores you see on the web have a frontend and a backend to them.&nbsp;</p><p><strong>&#8594; Ecommerce backends</strong></p><p>Like software engineers need to do when they develop an application from scratch, let&#8217;s think through the kinds of data that we&#8217;ll need to store to power our, uh, store. There are a couple of &#8220;concepts&#8221; that need to exist:</p><ul><li><p>A <strong>user</strong> &#8211; email, address, payment information</p></li><li><p>A <strong>product</strong> &#8211; details, price, pictures, inventory/stock</p></li><li><p>An <strong>order</strong> &#8211; size, time</p></li></ul><p>These may be decoupled in the actual database &#8211; e.g. we may want to store payment methods in a separate table than users &#8211; but the general theory holds.&nbsp;</p><p>We don&#8217;t want our frontend writing directly to the database, so applications usually have API endpoints that sit in the middle. We might have one called `createOrder` that takes a few parameters &#8211; order value, time, and products included &#8211; and adds a new row to the `orders` table, while kicking off the packing and shipping process. There might also be endpoints for authentication, so that you can sign into the store and not have to add your shipping address every goddamn time.</p><p><strong>&#8594; Ecommerce frontends</strong></p><p>The frontend of the store takes all of that nicely stored information from the backend and displays it to our visitors, while letting them interact with it, buy things, etc. Take a look at <a href="https://theentireworld.com/men">Entireworld&#8217;s site</a>, for example:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8cb0cb25-1cdf-4b04-aa8a-ea2309a0f4b8_2048x1121.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8cb0cb25-1cdf-4b04-aa8a-ea2309a0f4b8_2048x1121.png" width="1456" height="797" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/8cb0cb25-1cdf-4b04-aa8a-ea2309a0f4b8_2048x1121.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:797,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8cb0cb25-1cdf-4b04-aa8a-ea2309a0f4b8_2048x1121.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8cb0cb25-1cdf-4b04-aa8a-ea2309a0f4b8_2048x1121.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8cb0cb25-1cdf-4b04-aa8a-ea2309a0f4b8_2048x1121.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8cb0cb25-1cdf-4b04-aa8a-ea2309a0f4b8_2048x1121.png 1456w" sizes="100vw"></a></figure></div><p>On the backend, they&#8217;re storing information about all of these Organic Cotton Giant Shirts, including photos, price, how many are available, what sizes are in stock, all of that. The frontend reads that information and displays it to the user &#8211; you &#8211; in a visually pleasing format.</p><blockquote><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p><p>It can take a while for the split between frontend and backend to make sense. When you look at a web page, try to think about which pieces of information are <em>data</em> and which are <em>style</em>. The navigation bar, the fact that these shirts are in a grid, where the product information is placed; this is all frontend. The pictures, product names, and availability information <em>itself</em> is part of the backend.</p><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p></blockquote><p><em>(sad) edit: <a href="https://www.retaildive.com/news/entireworld-to-shut-down/608314/">Entireworld shut down</a> since I wrote this :(&nbsp;</em></p><h2><strong>What&#8217;s headless ecommerce, then?</strong></h2><p>With all of that in mind, it should now be relatively easy to understand what headless ecommerce means. Anything that&#8217;s <strong>headless</strong> &#8211; and you may have heard of a headless CMS as well &#8211; just means that the frontend is left to you, and is customizable and configurable. A headless ecommerce platform will build these basic backend elements for you, so you can focus on making your store look nice, and get out there and sell.</p><p>Let&#8217;s use <a href="https://www.swell.is/">Swell</a> as an example. When you <a href="https://swell.store/docs/api/#introduction">set up your store with Swell</a>, you use their SDK to get your backend in order instead of building it from scratch. Swell-provisioned backends have utilities for creating, reading, updating and deleting:</p><ul><li><p><strong>Orders</strong></p></li><li><p><strong>Products</strong></p></li><li><p><strong>Stock</strong></p></li><li><p><strong>Carts</strong></p></li><li><p><strong>Payments</strong></p></li><li><p><strong>Shipments</strong></p></li><li><p><strong>Subscriptions</strong></p></li><li><p>+ more</p></li></ul><p>Instead of creating these tables and endpoints yourself (and dealing with error handling and edge cases), Swell does all of that for you. They also take care of sending <a href="https://technically.substack.com/p/what-are-webhooks">webhooks</a> when events occur, <a href="https://swell.store/docs/api/?javascript#localization">localizing</a> to different languages, and advanced <a href="https://swell.store/docs/api/?javascript#aggregation">aggregation-like queries</a> for analytics. If you want to create an order, you&#8217;d just use their SDK:</p><pre><code>await swell.post('/orders', {
&nbsp;&nbsp;account_id: '5a9ea7ba3f95740a914267f1',
&nbsp;&nbsp;items: [
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;product_id: '5cad15bc9b14d1990724663a',
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quantity: 2,
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;],
&nbsp;&nbsp;billing: {
&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;},
&nbsp;&nbsp;shipping: {
&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;},
&nbsp;&nbsp;coupon_code: 'FREESHIPPING',

});</code></pre><blockquote><p>&#129300; <strong>Undefined Terms</strong> &#129300;</p><p>An SDK is a series of APIs grouped together for some unified purpose. Swell has many, many endpoints you can use to build your store, and all together they can be referred to as an SDK. More on this in <a href="https://technically.substack.com/p/whats-an-api">the Technically post about APIs</a>.</p><p>&#129300; <strong>Undefined Terms</strong> &#129300;</p></blockquote><p>Finally, beyond just the backend, Swell gives you a nice admin dashboard for managing the logistics behind your store. You can upload new products, adjust inventory, and update customer information without having to write any code.</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F15fd4054-ce12-4661-aebc-876f3680817d_2048x1106.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F15fd4054-ce12-4661-aebc-876f3680817d_2048x1106.png" width="1456" height="786" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/15fd4054-ce12-4661-aebc-876f3680817d_2048x1106.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:786,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F15fd4054-ce12-4661-aebc-876f3680817d_2048x1106.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F15fd4054-ce12-4661-aebc-876f3680817d_2048x1106.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F15fd4054-ce12-4661-aebc-876f3680817d_2048x1106.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F15fd4054-ce12-4661-aebc-876f3680817d_2048x1106.png 1456w" sizes="100vw"></a></figure></div><p>For a useful mental model, you can think about products like Swell as a <strong>Stripe for ecommerce</strong>. The target audience is developers, and the product&#8217;s goal is to make tedious backend work easy peasy; and alongside that, you get a nice UI for admin work.&nbsp;</p><h2><strong>Headless ecommerce vs. Shopify</strong></h2><p>The dominant standard for building web stores is obviously <a href="https://www.shopify.com/">Shopify</a>. Standard Shopify is not headless &#8211; when you use it, you use it to build <strong>both your frontend and backend</strong>. In other words, they take care of the backend (orders, products, etc.) but you don&#8217;t have full creative control over your store&#8217;s frontend; instead, you need to use their native website builder.</p><p>Shopify stores are organized as a series of pages:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1a1ebcad-c8ea-4a9f-8c55-ef917d00f2b9_2048x1074.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1a1ebcad-c8ea-4a9f-8c55-ef917d00f2b9_2048x1074.png" width="1456" height="764" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/1a1ebcad-c8ea-4a9f-8c55-ef917d00f2b9_2048x1074.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:764,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1a1ebcad-c8ea-4a9f-8c55-ef917d00f2b9_2048x1074.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1a1ebcad-c8ea-4a9f-8c55-ef917d00f2b9_2048x1074.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1a1ebcad-c8ea-4a9f-8c55-ef917d00f2b9_2048x1074.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1a1ebcad-c8ea-4a9f-8c55-ef917d00f2b9_2048x1074.png 1456w" sizes="100vw"></a></figure></div><p>When you create a page, you get a limited set of customizable attributes:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F6b429eb1-be85-4a88-a7f4-383dc57a7a47_2048x1074.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F6b429eb1-be85-4a88-a7f4-383dc57a7a47_2048x1074.png" width="1456" height="764" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/6b429eb1-be85-4a88-a7f4-383dc57a7a47_2048x1074.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:764,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F6b429eb1-be85-4a88-a7f4-383dc57a7a47_2048x1074.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F6b429eb1-be85-4a88-a7f4-383dc57a7a47_2048x1074.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F6b429eb1-be85-4a88-a7f4-383dc57a7a47_2048x1074.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F6b429eb1-be85-4a88-a7f4-383dc57a7a47_2048x1074.png 1456w" sizes="100vw"></a></figure></div><p>When you&#8217;re just trying to get started &#8211; or even more pressingly, if you don&#8217;t have developers on staff &#8211; this is a godsend. But if you want to really customize how your store looks and feels &#8211; which is increasingly important &#8211; you&#8217;re kind of stuck. <a href="https://www.shopify.com/plus">Shopify Plus</a> can run headless, but it&#8217;s a lot more expensive and meant mostly for enterprises<a class="footnote-anchor" id="footnote-anchor-1" href="#footnote-1">1</a>.&nbsp;</p><p>So in summary: headless ecommerce is about <strong>flexibility</strong>. Using Shopify or means you're locked into their site builder and styling, while a headless solution lets you build your frontend &#8211; and beyond that, infinite customizability in backend details &#8211; in the way you want to.</p><div><hr></div><p><em>This post is sponsored by <a href="https://www.swell.is/">Swell</a>, a headless e-commerce backend for your storefront. Swell makes it easy to set up storefronts that scale: you get a pre-built set of data models and APIs, along with a slick management console and model explorer.</em> </p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0ec26be0-e716-4c8f-a536-d0af9af544f2_770x438.jpeg"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0ec26be0-e716-4c8f-a536-d0af9af544f2_770x438.jpeg" width="104" height="59.15844155844156" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/0ec26be0-e716-4c8f-a536-d0af9af544f2_770x438.jpeg&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:438,&quot;width&quot;:770,&quot;resizeWidth&quot;:104,&quot;bytes&quot;:39510,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0ec26be0-e716-4c8f-a536-d0af9af544f2_770x438.jpeg 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0ec26be0-e716-4c8f-a536-d0af9af544f2_770x438.jpeg 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0ec26be0-e716-4c8f-a536-d0af9af544f2_770x438.jpeg 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0ec26be0-e716-4c8f-a536-d0af9af544f2_770x438.jpeg 1456w" sizes="100vw"></a></figure></div><div><hr></div><div class="footnote" id="footnote-1"><a href="#footnote-anchor-1" class="footnote-number" contenteditable="false">1</a><div class="footnote-content"><p>Shopify has been working on something internally called <a href="https://email.mg1.substack.com/c/eJxNjz1uxSAQhE9julgL5scuKNLkGhGGfZiEZyxYJ-L2Qa-KNM1oPmlmvCOMpXZ7N6xvFa_cWbBghDc7S1aA4JyDEFyCUrMcgVu2sK1OrXozk4Rn5HO790bOf8--PNlhMSxBreA5LkqrYALAQ-7OgAZptsWwbA-iq03L-yQ-htpRrvToc8Cf4Y4eaol4sqs0-kzBSrHqFbRm1UYX8etulM42uuPTpfwqfaHUL7Qn_raMRFgZ_T81NoYy-NMS-uNM3uXc_wDnP1NN">Hydrogen</a> (which they released a very early-looking version of recently).</p></div></div>]]></content:encoded></item><item><title><![CDATA[What does Twilio do?]]></title><description><![CDATA[Call me, text me, if you want to reach me]]></description><link>https://technically.substack.com/p/what-does-twilio-do</link><guid isPermaLink="true">https://technically.substack.com/p/what-does-twilio-do</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Wed, 20 Oct 2021 17:41:34 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb36ccb4a-402d-4bf1-9e91-314ff7bda8e6_1200x675.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb36ccb4a-402d-4bf1-9e91-314ff7bda8e6_1200x675.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb36ccb4a-402d-4bf1-9e91-314ff7bda8e6_1200x675.png" width="1200" height="675" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/b36ccb4a-402d-4bf1-9e91-314ff7bda8e6_1200x675.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:675,&quot;width&quot;:1200,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb36ccb4a-402d-4bf1-9e91-314ff7bda8e6_1200x675.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb36ccb4a-402d-4bf1-9e91-314ff7bda8e6_1200x675.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb36ccb4a-402d-4bf1-9e91-314ff7bda8e6_1200x675.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb36ccb4a-402d-4bf1-9e91-314ff7bda8e6_1200x675.png 1456w" sizes="100vw"></a></figure></div><p>For a while, Twilio (<a href="https://www.google.com/search?q=twilio+stock&amp;oq=twilio+stock&amp;aqs=chrome..69i57j0i131i433i512j0i512l8.1334j1j7&amp;sourceid=chrome&amp;ie=UTF-8">$TWLO, $65B</a>) made noise by putting up these billboards around San Francisco (last time I was there, I think a few were still up). The idea was that they didn&#8217;t need to advertise any specifics about the product &#8211; it was so popular, and so ubiquitous among technical teams, that all you needed to do was &#8220;ask your developer.&#8221;</p><p>Well, dear readers, I <em>am</em> your developer. And so today, we&#8217;re diving into Twilio, what exactly they do, and why that makes them worth so much cold hard cash.</p><h2><strong>The TL;DR</strong></h2><p>Twilio makes a suite of products that help you <strong>communicate with your customers</strong> via SMS, video, calls, and more.</p><ul><li><p>Web and mobile apps need to <strong>communicate with users</strong>: think SMS and email code confirmations, etc.</p></li><li><p>On the backend, <strong>getting a phone number set up</strong> to send and receive texts / calls from programmatically is a huge PITA</p></li><li><p>Twilio started with one product &#8211; a <strong>simple SDK</strong> for programmatic SMS / calls</p></li><li><p>Since then, they&#8217;ve expanded the product suite to <strong>video, email, and WhatsApp</strong></p></li></ul><p>Like <a href="https://technically.substack.com/p/what-does-stripe-do">Stripe did with payments</a>, Twilio took one piece of the developer workflow with a particularly tedious set of constraints, made it really simple to do via well designed APIs, and made a boatload of money off of it. A pattern I smell perhaps??</p>
      <p>
          <a href="https://technically.substack.com/p/what-does-twilio-do">
              Read more
          </a>
      </p>
   ]]></content:encoded></item><item><title><![CDATA[What happened to Facebook?]]></title><description><![CDATA[A basic explainer of what that outage was all about]]></description><link>https://technically.substack.com/p/what-happened-to-facebook</link><guid isPermaLink="true">https://technically.substack.com/p/what-happened-to-facebook</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 05 Oct 2021 16:44:21 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F57f45b47-3c0d-4cfc-b9a8-cbea6b1c7680_1456x1352.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p><em>(edit: Facebook finally <a href="https://engineering.fb.com/2021/10/04/networking-traffic/outage/">published some information</a> about the outage, corroborating expert suspicions)</em></p><h2><strong>The TL;DR</strong></h2><p>Yesterday, Facebook, Instagram, and WhatsApp all went down (i.e. didn&#8217;t work) for a good chunk of the day. They haven&#8217;t given any official statements about what happened, but experts seem to agree that it was related to <strong>DNS issues, specifically BGP routing</strong>. In simpler terms, the infrastructure that connects Facebook&#8217;s servers to the broader internet (and thus your laptop) broke. The issue highlights one important truth about the internet; it relies on a bunch of obscure, behind the scenes pieces of software that nobody really controls.</p><h2><strong>Refresher: How the internet works</strong></h2><p>Outages are a fact of life: if you work in software they are bound to happen to your company sooner or later. There are a lot of different types of outages: they can be related to your application, your infrastructure, or even the infrastructure that supports your infrastructure.&nbsp;</p><p>Teams set up all kinds of monitoring, graphs, and alerts to catch these incidents before they happen. But you simply can&#8217;t prevent them all. This particular incident (again, we think) seems to have been related to DNS, so let&#8217;s dive into what that is exactly.</p><p>Someone famous once said that <a href="https://technically.substack.com/p/whats-the-internet">the internet is really just a bunch of cables</a>, and that&#8217;s <em>basically </em>true; it just refers to all the computers in the world, networked together via cables or wireless. When you load a website on your laptop, what you&#8217;re <em>really</em> doing behind the scenes is just connecting to another computer &#8211; in this case, a server &#8211; far away, via a bunch of transfers and switches. You <a href="https://technically.substack.com/p/whats-a-web-app">ask that server for the web page you want</a>, and it sends it over.</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F57f45b47-3c0d-4cfc-b9a8-cbea6b1c7680_1456x1352.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F57f45b47-3c0d-4cfc-b9a8-cbea6b1c7680_1456x1352.png" width="1456" height="1352" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/57f45b47-3c0d-4cfc-b9a8-cbea6b1c7680_1456x1352.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1352,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F57f45b47-3c0d-4cfc-b9a8-cbea6b1c7680_1456x1352.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F57f45b47-3c0d-4cfc-b9a8-cbea6b1c7680_1456x1352.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F57f45b47-3c0d-4cfc-b9a8-cbea6b1c7680_1456x1352.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F57f45b47-3c0d-4cfc-b9a8-cbea6b1c7680_1456x1352.png 1456w" sizes="100vw"></a></figure></div><p>In that interaction between you and the server, there&#8217;s <em>a lot</em> going on behind the scenes. As you can probably tell, there&#8217;s no single cable that&#8217;s going from your laptop to Facebook&#8217;s server. There&#8217;s an entire set of infrastructure in the internet&#8217;s &#8220;middle&#8221; that takes care of taking your laptop&#8217;s request, routing it towards Facebook&#8217;s servers, and getting the answer back to you. A big part of that is DNS &#8211; the flashy subject of our next section.</p><h2><strong>The DNS and BGP</strong></h2><p>If the internet is just a bunch of cables (and it is, as I literally just told you), an obvious question arises &#8211; how do all of the connected computers and servers know who each other are? Unlike <a href="https://www.youtube.com/watch?v=ClgIMfgqfvM">Lloyd Braun</a>, they do not wear name tags: instead there&#8217;s a central &#8220;address book&#8221; that maps servers and computers to human recognizable destinations. Just like you have contacts in your phone that map a number that&#8217;s really hard to remember to a name that&#8217;s (at least slightly) easier to remember, the DNS maps a computer&#8217;s or network&#8217;s IP address to a domain name like <a href="http://www.facebook.com">www.facebook.com</a>.&nbsp;</p><p><a href="https://technically.substack.com/p/whats-an-ip-address">Let&#8217;s start with </a><strong><a href="https://technically.substack.com/p/whats-an-ip-address">an IP address</a></strong> &#8211; it&#8217;s the basic phone number of the internet. There&#8217;s a limited number of them, and each one is unique, just like an ID or a social security number. <a href="https://superuser.com/questions/745875/if-ip-addresses-are-unique-why-is-it-so-many-routers-have-the-address-192-168-1">IP addresses aren&#8217;t unique</a> to <em>computers</em> though &#8211; they&#8217;re unique to <em>internet connected</em> computers. Your computer isn&#8217;t actually connected to the internet directly; it runs through a router, which it reaches via a wireless connection if you&#8217;re using WiFi. That router is the &#8220;parent&#8221; of your local network, which might include your laptop, your phone, your internet connected fridge, and your neighbor who figured out your &#8220;hella secure&#8221; password 7 months ago.</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F709dd0f5-1c34-4d17-b613-44bd0608c7c1_1456x1160.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F709dd0f5-1c34-4d17-b613-44bd0608c7c1_1456x1160.png" width="1456" height="1160" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/709dd0f5-1c34-4d17-b613-44bd0608c7c1_1456x1160.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1160,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F709dd0f5-1c34-4d17-b613-44bd0608c7c1_1456x1160.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F709dd0f5-1c34-4d17-b613-44bd0608c7c1_1456x1160.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F709dd0f5-1c34-4d17-b613-44bd0608c7c1_1456x1160.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F709dd0f5-1c34-4d17-b613-44bd0608c7c1_1456x1160.png 1456w" sizes="100vw"></a></figure></div><blockquote><p><strong>&#128269; Deeper Look</strong><em><strong> </strong></em><strong>&#128269;</strong></p><p>A<strong> LAN </strong>is a Local Area Network, which is what your series of devices in your home constitutes. While each device in your LAN may have a unique IP address within your LAN, those addresses are not unique globally. You can think of the internet as made up of many of these LANs, sometimes grouped together into <a href="https://www.cisco.com/c/en/us/products/switches/what-is-a-wan-wide-area-network.html">WANs</a> (Wide Area Networks).</p><p><strong>&#128269; Deeper Look</strong><em><strong> </strong></em><strong>&#128269;</strong></p></blockquote><p>It would be really annoying to type in &#8216;192.168.1.1&#8217; into your browser every time you wanted to visit Facebook, so the internet developed something called <a href="https://www.cloudflare.com/learning/dns/what-is-dns/">DNS</a>, which stands for <strong>Domain Name Service</strong>. The DNS is the address book that maps IP addresses to domain names like <a href="http://www.facebook.com">www.facebook.com</a>. These domain names are unique on the public internet, just like IP addresses; but they&#8217;re a lot easier to remember. Logistically, these servers are hosted and sold by various registrars and registries across the web. This is a very complicated situation that you can <a href="https://www.cloudflare.com/learning/dns/glossary/what-is-a-domain-name-registrar/">read more about here</a>.</p><p>The final piece you need to understand what happened to Facebook is called <strong>BGP routing</strong>. BGP stands for <strong>Border Gateway Protocol</strong>, and it&#8217;s commonly referred to as <a href="https://www.cloudflare.com/learning/security/glossary/what-is-bgp/">the &#8220;postal service&#8221; of the internet</a>. Its job is simple: find the most efficient route for data to travel between two points on the internet. When you load <a href="http://www.facebook.com">www.facebook.com</a>, BGP is responsible for finding the quickest, most efficient path to Facebook&#8217;s servers (and back), via the crazy, disorganized network of computers that is the internet.&nbsp;</p><p>So to sum up: the internet is a big network of computers. When you load a site, you&#8217;re sending a request to that site&#8217;s servers and getting some data back. DNS makes it easy to know which servers in the world belong to whom and what they do; BGP takes care of actually getting your data there and back in the most efficient way possible.</p><h2><strong>Bringing it all together: Facebook&#8217;s outage</strong></h2><p>The wacky thing about BGP is that it&#8217;s basically autonomous &#8211; there&#8217;s no central body controlling it, even though it&#8217;s seemingly one of the most important parts of internet bedrock. What that means is that misconfiguring anything related to BGP can take entire swaths of the internet offline, because traffic <em>can&#8217;t find them</em>.</p><p>This is what many people believe seems to have happened to Facebook. Big Blue operates its own data centers &#8211; thousands or even more interconnected servers &#8211; that store all of your data, host the app, and also carry internal Facebook services like email and internal tools. They seem to have (accidentally?) removed the BGP routes that connect their DNS &#8211; the mapping of Facebook domains to their server IP addresses &#8211; to the rest of the web. There was nothing <em>wrong</em> with Facebook&#8217;s servers or their apps; it&#8217;s just that we can&#8217;t access them via the internet.</p><blockquote><p>&#9939; <strong>Related Concepts </strong>&#9939;</p><p>There are a lot of reasons that apps become incommunicado. This particular example relates to public internet networking issues, but that&#8217;s just one piece of the puzzle. Even within the category of networking issues there are other reasons things can fail, e.g. your app might be unable to reach <a href="https://technically.substack.com/p/whats-a-relational-database">your database</a>. Outside of that, apps themselves can be faulty, databases can go down; it&#8217;s rough out there, pat your DevOps team on the back.</p><p>&#9939; <strong>Related Concepts </strong>&#9939;</p></blockquote><p>This isn&#8217;t the first time that BGP issues have led to major outages. Quoting from Cloudflare&#8217;s <a href="https://www.cloudflare.com/learning/security/glossary/what-is-bgp/">explainer on BGP</a>:</p><blockquote><p><em>&#8220;In 2004 a Turkish Internet service provider (ISP) called TTNet accidentally advertised bad BGP routes to its neighbors. These routes claimed that TTNet itself was the best destination for all traffic on the Internet. As these routes spread further and further to more autonomous systems, a massive disruption occurred, creating a 1-day crisis where many people across the world were not able to access some or all of the Internet.</em></p><p><em>Similarly, in 2008 a Pakistani ISP attempted to use a BGP route to block Pakistani users from visiting YouTube. The ISP then accidentally advertised these routes with its neighboring AS&#8217;s and the route quickly spread across the Internet&#8217;s BGP network. This route sent users trying to access YouTube to a dead end, which resulted in YouTube being inaccessible for several hours.&#8221;</em></p></blockquote><p>In other words, this is an uncommon but not unheard of issue. Nobody is quite sure <em>why</em> these routes weren&#8217;t working, but <a href="https://www.wired.com/story/why-facebook-instagram-whatsapp-went-down-outage/">speculation is that Facebook accidentally misconfigured them</a>. This also may be why it took them so long to fix: their entire intranet (internal internet) may have been down, which blocked people from communicating with each other and even accessing the infrastructure they needed to fix.</p><h2><strong>Further reading</strong></h2><ul><li><p>Cloudflare has <a href="https://www.cloudflare.com/learning/security/glossary/what-is-bgp/">excellent content on their site</a> explaining basics of the internet and its infrastructure</p></li><li><p><a href="https://www.wired.com/story/why-facebook-instagram-whatsapp-went-down-outage/">WIRED&#8217;s article</a> has interesting quotes about what may have happened to Facebook</p></li><li><p><a href="https://krebsonsecurity.com/2021/10/what-happened-to-facebook-instagram-whatsapp/">Krebs on Security</a> has continually updating information on the outage</p></li></ul>]]></content:encoded></item><item><title><![CDATA[What does dbt do?]]></title><description><![CDATA[The talk of the (fish)town]]></description><link>https://technically.substack.com/p/what-does-dbt-do</link><guid isPermaLink="true">https://technically.substack.com/p/what-does-dbt-do</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Mon, 27 Sep 2021 16:30:55 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fbb7b2361-e5b6-46ef-a7c5-335a454ec646_1302x386.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p><a href="https://technically.substack.com/subscribe?utm_medium=rss&amp;utm_content=32577732">dbt</a> (no capitals) is a tool for <strong>transforming and organizing data in your warehouse</strong>. It helps data teams get raw data ready for analysis and impact.</p><ul><li><p><strong>Data models</strong> are the core of effective data teams &#8211; they map business concepts onto cleaned, organized data</p></li><li><p>dbt helps data teams use SQL to <strong>build useful, documented data models</strong> that the rest of the com&#8230;</p></li></ul>
      <p>
          <a href="https://technically.substack.com/p/what-does-dbt-do">
              Read more
          </a>
      </p>
   ]]></content:encoded></item><item><title><![CDATA[What are webhooks?]]></title><description><![CDATA[Triggered]]></description><link>https://technically.substack.com/p/what-are-webhooks</link><guid isPermaLink="true">https://technically.substack.com/p/what-are-webhooks</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Mon, 13 Sep 2021 16:27:05 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7ba53bdb-b5b6-4e2c-bbb8-7bf357eb1063_1365x958.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p>Webhooks are APIs, but backwards - they&#8217;re ways for applications to <strong>send data</strong> to other applications, automatically.</p><ul><li><p>webhooks let applications send data around when important <strong>events happen</strong>, like a user signing up</p></li><li><p>Instead of APIs - which are passive - webhooks are <strong>active</strong>, which means you don&#8217;t need to constantly poll them for updates</p></li><li><p>Popular business apps like <strong>Stripe</strong> and <strong>Github</strong> provide Webhooks for things like customer checkout or pull requests</p></li><li><p>The most popular use case for webhooks is <strong>small integrations</strong>, or getting your business apps to talk to each other in the ways that you need them to</p></li></ul><p>Most mature B2B apps offer some sort of webhook integration, so it&#8217;s worth understanding why they exist and what you can do with them.</p><h2><strong>Webhooks vs. APIs</strong></h2><p>The easiest way to understand webhooks is to think of them as the opposite (in a way) of APIs.&nbsp;</p><blockquote><p>&#129504; <strong>Jog your memory</strong> &#129504;</p><p>A quick refresher on what an API is:</p><ul><li><p>APIs let applications talk to each other - they take inputs in the form of a <em>request </em>and give you back a <em>response</em></p></li><li><p>If you&#8217;re building an app with a profile page, you might send a request to your users API to get back information about the current user (address, settings, etc.)</p></li><li><p>Most APIs are for internal use only, but apps like Twitter will often offer <em>external APIs</em> so you can work with their data programmatically&nbsp;</p></li></ul><p>If you&#8217;re still a bit shaky, read <a href="https://technically.substack.com/p/whats-an-api">the original Technically post about APIs here</a>.</p><p>&#129504; <strong>Jog your memory</strong> &#129504;</p></blockquote><p>The thing about APIs is that they&#8217;re <strong>passive</strong> - you need to send a request to get a response. APIs will never reach out to you, ask you how you&#8217;re doing, and why you&#8217;re behind on your car payments.&nbsp;Or maybe &#8220;responsive&#8221; is a better word.</p><p>Webhooks, on the other hand, are <strong>active</strong> - instead of taking a request and returning a response, they <strong>send out</strong> data when something happens internally. This is actually really similar to how you might check your Robinhood portfolio. You can open the app every day (lol more like every hour) to see how you&#8217;re doing, or you can configure the app to <em>notify you</em> every time there&#8217;s a meaningful change (do not do this if you value your mental health). Checking the app is passive, notifications are active.</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7ba53bdb-b5b6-4e2c-bbb8-7bf357eb1063_1365x958.jpeg"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7ba53bdb-b5b6-4e2c-bbb8-7bf357eb1063_1365x958.jpeg" width="1365" height="958" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/7ba53bdb-b5b6-4e2c-bbb8-7bf357eb1063_1365x958.jpeg&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:958,&quot;width&quot;:1365,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7ba53bdb-b5b6-4e2c-bbb8-7bf357eb1063_1365x958.jpeg 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7ba53bdb-b5b6-4e2c-bbb8-7bf357eb1063_1365x958.jpeg 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7ba53bdb-b5b6-4e2c-bbb8-7bf357eb1063_1365x958.jpeg 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7ba53bdb-b5b6-4e2c-bbb8-7bf357eb1063_1365x958.jpeg 1456w" sizes="100vw"></a></figure></div><h2><strong>A semi-realistic Webhook example</strong></h2><p>This is all very theoretical so far, which is not what you&#8217;re here for. In practice, a webhook is usually <strong>a URL</strong> (i.e. an endpoint on a server) that you paste into a settings field, or add into your app manually. To understand <em>what that means</em>, let&#8217;s take a look at <a href="https://stripe.com/">Stripe</a>.&nbsp;</p><p>Stripe is a payment processor - businesses use them to process credit cards, manage subscriptions, and handle their customer data. Stripe operates mostly via their APIs - they have endpoints for charging customers, creating new customers, etc.&nbsp;</p><p>For our example, let&#8217;s say we&#8217;re <a href="https://www.madhappy.com/">Madhappy</a>, and we&#8217;re running an e-commerce store built on top of Stripe (we&#8217;re not, it&#8217;s on Shopify, but ignore that). Every time someone orders their first item, we want to add them to our <a href="https://www.localoptimist.com/">Local Optimist newsletter</a>. How would we do that?</p><p>Stripe has an <a href="https://stripe.com/docs/api/customers/list">API endpoint for listing all existing customers</a>. We <em>could</em> repeatedly hit that endpoint, and every time a new customer is on the list, send their email address over to our newsletter system. But then we&#8217;d need to set up some sort of recurring request, check differences between lists, deal with pagination - a lot of overhead. Conveniently though, <a href="https://stripe.com/docs/api/webhook_endpoints/object">Stripe offers webhooks</a>, so we can have Stripe <em>automatically</em> send an event to our newsletter system every time a new customer gets created. Neat.</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa39545da-4f11-4f0f-bbd7-61c6208bfacf_1397x1082.jpeg"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa39545da-4f11-4f0f-bbd7-61c6208bfacf_1397x1082.jpeg" width="1397" height="1082" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/a39545da-4f11-4f0f-bbd7-61c6208bfacf_1397x1082.jpeg&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1082,&quot;width&quot;:1397,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa39545da-4f11-4f0f-bbd7-61c6208bfacf_1397x1082.jpeg 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa39545da-4f11-4f0f-bbd7-61c6208bfacf_1397x1082.jpeg 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa39545da-4f11-4f0f-bbd7-61c6208bfacf_1397x1082.jpeg 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa39545da-4f11-4f0f-bbd7-61c6208bfacf_1397x1082.jpeg 1456w" sizes="100vw"></a></figure></div><p>This is exactly the difference we talked about above - APIs (like listing customers) are passive and require <em>our</em> application to take an action, while webhooks (send an event when a customer gets created) are active and <em>initiate</em> action themselves.&nbsp;</p><blockquote><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p><p>Not every application (including your own, if you&#8217;re building one) supports webhooks, and even if they do, they might not support webhooks from the application that you need them to. Popular newsletter providers like Mailchimp <a href="https://mailchimp.com/developer/guides/sync-audience-data-with-webhooks/">support webhooks out of the box</a>.</p><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p></blockquote><p>In general, webhooks tend to get used for <strong>quick, simple integrations</strong> like our newsletter example; if the task is as simple as sending basic data (like an email address) from one place to another, webhooks are a good way to do that. But if you need a more involved integration, like with two way communication, that&#8217;s typically going to require more custom work.</p><h2><strong>Webhooks mechanics</strong></h2><p>Like APIs, webhooks usually send data in a JSON format. In our Stripe example, the webhook we set up might send us something like this when a customer gets created:</p><pre><code>{&nbsp;&nbsp;
  event: 'customer.created',
  email: 'justin@technically.dev',
  created_at: '2020-09-15',
  subscription_type: 'monthly'
}</code></pre><p>If the app you&#8217;re using (like our newsletter system) supports webhooks, you&#8217;ll probably see a section of the settings page dedicated to them. You&#8217;ll need to get a <strong>URL</strong> where the app will <em>receive</em> data, and then put that URL into the application that&#8217;s actually sending the webhook in the first place.&nbsp;</p><p>If you&#8217;re consuming webhooks in your own custom app, the logic is the same - you&#8217;ll need to build an endpoint to consume events, and pass that endpoint into the application producing the webhooks (like Stripe).&nbsp;</p><h2><strong>Further reading</strong></h2><ul><li><p>I wrote a more technical guide to <a href="https://workos.com/blog/building-webhooks-into-your-application-guidelines-and-best-practices">best practices for building webhooks into your app</a> for the WorkOS blog</p></li><li><p><a href="https://zapier.com/blog/what-are-webhooks/">Zapier&#8217;s deep dive into how Webhooks work</a></p></li><li><p><a href="https://webhook.site/#!/797fcfdc-f036-473b-ad9f-97db1332eeaf">Test Webhooks yourself with webhook.site</a></p></li></ul>]]></content:encoded></item><item><title><![CDATA[What does Hashicorp do?]]></title><description><![CDATA[Infrastructure for managing your infrastructure]]></description><link>https://technically.substack.com/p/what-does-hashicorp-do</link><guid isPermaLink="true">https://technically.substack.com/p/what-does-hashicorp-do</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 24 Aug 2021 16:16:02 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7e8995e2-43ad-4af2-8cba-d686680b7189_1600x552.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p>Hashicorp sells <a href="https://technically.substack.com/subscribe?utm_medium=rss&amp;utm_content=32572651">open-core</a> software that <strong>helps developers manage their cloud infrastructure </strong>via code-based configuration and access.</p><ul><li><p>Cloud infrastructure is <strong>constantly evolving</strong> &#8211; larger organizations need to create and modify their resources on the reg&nbsp;</p></li><li><p>As organizations move towards multi-cloud and infrastructure breadth increases, <strong>managing this s&#8230;</strong></p></li></ul>
      <p>
          <a href="https://technically.substack.com/p/what-does-hashicorp-do">
              Read more
          </a>
      </p>
   ]]></content:encoded></item><item><title><![CDATA[APIs for the rest of us]]></title><description><![CDATA[A beginner's guide to working with REST APIs]]></description><link>https://technically.substack.com/p/apis-for-the-rest-of-us</link><guid isPermaLink="true">https://technically.substack.com/p/apis-for-the-rest-of-us</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Mon, 09 Aug 2021 16:22:11 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8b860828-70e2-4269-bc4c-73fe35f5500e_3198x1860.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p>This week&#8217;s post is a long one &#8211; it&#8217;s about REST APIs (the ones that power almost every single app that we use), and how to work with them. You can read it on the Technically site:</p><p class="button-wrapper" data-attrs="{&quot;url&quot;:&quot;https://technically.dev/posts/apis-for-the-rest-of-us&quot;,&quot;text&quot;:&quot;Read APIs for the rest of us&quot;,&quot;action&quot;:null,&quot;class&quot;:null}"><a class="button primary" href="https://technically.dev/posts/apis-for-the-rest-of-us"><span>Read APIs for the rest of us</span></a></p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8b860828-70e2-4269-bc4c-73fe35f5500e_3198x1860.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8b860828-70e2-4269-bc4c-73fe35f5500e_3198x1860.png" width="1456" height="847" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/8b860828-70e2-4269-bc4c-73fe35f5500e_3198x1860.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:847,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:430230,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8b860828-70e2-4269-bc4c-73fe35f5500e_3198x1860.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8b860828-70e2-4269-bc4c-73fe35f5500e_3198x1860.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8b860828-70e2-4269-bc4c-73fe35f5500e_3198x1860.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F8b860828-70e2-4269-bc4c-73fe35f5500e_3198x1860.png 1456w" sizes="100vw"></a></figure></div><p>If you liked <a href="https://technically.dev/posts/sql-for-the-rest-of-us">SQL for the rest of us</a>, then this is for you. And as always, let me know what you think by responding to this email!</p>]]></content:encoded></item><item><title><![CDATA[What does Cloudflare do?]]></title><description><![CDATA[The biggest internet company you've never heard of]]></description><link>https://technically.substack.com/p/what-does-cloudflare-do</link><guid isPermaLink="true">https://technically.substack.com/p/what-does-cloudflare-do</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 20 Jul 2021 16:41:17 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F411fae63-5e96-4f2b-b8a6-4ac5ad8c6a5c_856x480.gif" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p>Cloudflare provides <strong>networking tools</strong> that help companies distribute their apps globally in a <strong>secure way</strong>.</p><ul><li><p>To make sure your apps and sites are fast no matter where your users are, developers put copies of their site in data centers across the globe, called a <strong>CDN</strong></p></li><li><p>Cloudflare provides a giant, super fast CDN with <strong>built in security features</strong> to prevent&#8230;</p></li></ul>
      <p>
          <a href="https://technically.substack.com/p/what-does-cloudflare-do">
              Read more
          </a>
      </p>
   ]]></content:encoded></item><item><title><![CDATA[What does MongoDB do?]]></title><description><![CDATA[A database for the people, and the companies]]></description><link>https://technically.substack.com/p/what-does-mongodb-do</link><guid isPermaLink="true">https://technically.substack.com/p/what-does-mongodb-do</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 29 Jun 2021 16:39:09 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1c9d8340-c260-40fe-aa13-8cbb4c181723_1415x1152.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<p><em>(MongoDB paid me to write this post. But I was going to write it anyway.)</em></p><h2><strong>The TL;DR</strong></h2><p>MongoDB is a highly popular <strong>document database</strong> (i.e. NoSQL) for powering your applications.</p><ul><li><p><strong>Every app</strong> (give or take a few) is powered by a <strong>production database&nbsp;</strong></p></li><li><p>These days, you can choose between something <strong>structured</strong> (SQL) or <strong>unstructured</strong> (NoSQL)</p></li><li><p>Document databases are <strong>schemaless</strong> &#8211; you just throw data in, and worry about it later</p></li><li><p>MongoDB provides <strong>an ecosystem</strong> around its document DB &#8211; managed services, an IDE, analytics, and search (among other things)</p></li></ul><p>MongoDB is one of the OGs of what I consider the modern tech ecosystem (<a href="https://www.cnbc.com/2017/10/18/mongodb-prices-its-ipo-worth-1-point-2b.html">IPOd back in 2017</a>), and powers apps at some of the world&#8217;s largest enterprises. But they&#8217;re not a stodgy shop &#8211; their cloud product (<a href="https://www.mongodb.com/cloud/atlas">Atlas</a>) has been growing like a weed recently, and their website actually (gasp) explains what the product does. So let&#8217;s dive in and see what they&#8217;re all about.</p><h2><strong>A refresher &#8211; what&#8217;s NoSQL?</strong></h2><p>Although their marketing has moved away from the NoSQL moniker in recent years, the key to understanding MongoDB &#8211; and why they had such a major impact on the ecosystem &#8211; is to understand NoSQL.&nbsp;</p><blockquote><p>&#128302; <strong>Dependencies</strong> &#128302;</p><p>If you haven&#8217;t yet, check out the Technically posts on <a href="https://technically.substack.com/p/whats-a-relational-database">relational databases</a> and then <a href="https://technically.substack.com/p/whats-nosql">NoSQL</a>. This section will jog your memory, but to go in depth you&#8217;ll want to read these bad boys.</p><p>&#128302; <strong>Dependencies</strong> &#128302;</p></blockquote><p>For most of technical history, apps were powered by relational databases. A relational database is all about <strong>structure</strong> &#8211; before you put any data into it, you plan out what your data is going to look like. What are my column names going to be? How will my tables relate to each other? What type of data will each column store? All of that information together is called a <strong>schema</strong>, and it&#8217;s the <em>sine a qua non</em> of relational data. You&#8217;ll usually hear relational databases referred to as <strong>SQL databases</strong>.</p><p>(By the way, <strong>SQL</strong> stands for Structured Query Language, and it&#8217;s a category of mini-programming languages that people use to get data in and out of these databases. Rigid structure means that querying data is easy and straightforward.)</p><p>NoSQL, on the other hand, is exactly what you think it is &#8211; <strong>unstructured</strong>. Instead of rigidly defining what your data looks like before storing it, you just kind of throw it in there and worry about it later. Querying it is more difficult, but it&#8217;s a lot easier to scale horizontally to multiple servers. Here&#8217;s a quick snapshot of how these storage patterns differ:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1c9d8340-c260-40fe-aa13-8cbb4c181723_1415x1152.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1c9d8340-c260-40fe-aa13-8cbb4c181723_1415x1152.png" width="1415" height="1152" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/1c9d8340-c260-40fe-aa13-8cbb4c181723_1415x1152.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1152,&quot;width&quot;:1415,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1c9d8340-c260-40fe-aa13-8cbb4c181723_1415x1152.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1c9d8340-c260-40fe-aa13-8cbb4c181723_1415x1152.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1c9d8340-c260-40fe-aa13-8cbb4c181723_1415x1152.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1c9d8340-c260-40fe-aa13-8cbb4c181723_1415x1152.png 1456w" sizes="100vw"></a></figure></div><p>The thing about NoSQL is that those two people (Justin and Selin) don&#8217;t even need to have the same attributes. Justin can have a &#8220;favorite food&#8221; value, while Selin has a &#8220;hair color&#8221; one. In SQL, if one record has a column, all records in the table need to have that same column. You can imagine how that <strong>flexibility</strong> that NoSQL offers is convenient &#8211; but it also means that down the road, you have less predictability around what your data will look like, and that can screw things up.</p><p>There are all different kinds of NoSQL databases &#8211; key value stores, wide column stores, etc. The most popular type, though, is called a <strong>document store</strong>, and it&#8217;s the core of how MongoDB works. The canonical &#8220;unit&#8221; &#8211; the main thing at play &#8211; is a document, which is just a collection of different keys and values. Here&#8217;s a document that represents my band:</p><pre><code>{
    guitar_players: {
        justin_gage: {
            height: 5"3,
            weight: "wouldn't you like to know"
            },
        jake_mendel: {
            height: 5"11,
            weight: 170,
            axe: &#8220;mary kaye&#8221;
            }
        },
    drum_players: {
        chris_behrens: {
           height: 6"0,
           weight: 185,
           cymbal: &#8220;zildjian&#8221;
        }
    }
}
</code></pre><p>Each entry has a key (what does this data refer to?) and a value (the actual data). For Jake, height is a key, and 5&#8221;11 is a value. At a higher level, guitar_players is a key, and the entire entries for both Justin and Jake are the values. Notice how there&#8217;s really no structure at all to this &#8211; values and keys can be anything, data types don&#8217;t need to match, etc. This is the double edged sword of NoSQL.&nbsp;</p><h2><strong>The basic MongoDB product</strong></h2><p>MongoDB <a href="https://petedejoy.com/writing/mongodb">originally started as a company called 10gen</a> &#8211; and when they open sourced their document database in 2008, the idea of using a NoSQL database in production was still not quite widely accepted. It took until 2013 for them to rebrand to MongoDB, and by then, they had built out a proper product suite with cloud, backups, monitoring, and an enterprise offering. And that&#8217;s the MongoDB you&#8217;ve probably heard of today. We&#8217;ll start by running through the basic open source product, and then explore the broader suite and where MongoDB fits into the ecosystem.</p><h3><strong>MongoDB is a document database</strong></h3><p>MongoDB basically invented the modern document database as we know it (commercially, at least). So let&#8217;s dive into what that is.</p><p>Like we covered above, a document database is just a series of keys and values. MongoDB has their own terminology for the <strong>taxonomy</strong> of data (i.e. what contains what):</p><ul><li><p>A <strong>document</strong> is a series of keys and values. This might correspond to a single user.</p></li><li><p>A <strong>collection</strong> is a group of multiple documents. This might correspond to all of your users. It&#8217;s like a table in a SQL database.</p></li><li><p>A <strong>database</strong> is a group of collections, like the same name means in SQL databases.</p></li></ul><p>You can read more about the information hierarchy in <a href="https://docs.mongodb.com/manual/core/databases-and-collections/">their docs here</a>.&nbsp;</p><h3><strong>Interacting with MongoDB</strong></h3><p>Once you&#8217;ve got your database provisioned and ready to go, there are a few different ways you can actually interact with it. This is true of most databases (SQL too), but we&#8217;ll cover it here too:</p><ul><li><p><strong><a href="https://docs.mongodb.com/manual/mongo/">The mongo Shell</a></strong> &#8211; you can write commands directly via your terminal, in JavaScript. Generally useful for setup, quick commands, and administrative tasks.</p></li><li><p><strong><a href="https://docs.mongodb.com/drivers/">Drivers</a></strong> &#8211; drivers let you write MongoDB queries in your favorite programming languages like Python and JavaScript. Synonymous with <em>client libraries</em> (if you&#8217;ve seen that term around).</p></li><li><p><strong>GUIs</strong> &#8211; you can interact with your MongoDB data through a graphical user interface on your local machine. MongoDB provides a free GUI called <a href="https://www.mongodb.com/products/compass">Compass</a>, but there are <a href="https://retool.com/blog/the-best-mongodb-guis-in-2020/">other popular ones</a> like <a href="https://studio3t.com/">Studio3T</a>.</p></li></ul><p>It&#8217;s all the same data behind the scenes, but depending on what context you&#8217;re interacting with your database in (testing, production, etc.) you might use one or all of these methods.</p><h3><strong>What using MongoDB looks like</strong></h3><p>The lifecycle of a basic app is usually called <strong>CRUD</strong> &#8211; it stands for <strong>Create</strong>, <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>. These are the 4 things that most apps do, give or take. For the utmost simplicity, imagine a note taking app backed by MongoDB. Notes are stored in the database, and the app lets you:</p><ul><li><p><strong>C</strong>reate a new note (insert a new value into Mongo)</p></li><li><p><strong>R</strong>ead an existing note (find an existing value in Mongo)</p></li><li><p><strong>U</strong>pdate an existing note (edit an existing value in Mongo)</p></li><li><p><strong>D</strong>elete an existing note (remove an existing value in Mongo)</p></li></ul><p>To actually <em>interact</em> with your MongoDB instance, you can use their CLI directly from your Terminal, or use a client library in your favorite programming language like JavaScript. If we&#8217;re building our note taking app, here&#8217;s a sample of Mongo commands we might use:</p><ul><li><p><strong>C</strong>reate a new note with `<a href="https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/">insertOne()</a>`</p></li><li><p><strong>R</strong>ead an existing note with `<a href="https://docs.mongodb.com/manual/reference/method/db.collection.findOne/">findOne()</a>`</p></li><li><p><strong>U</strong>pdate an existing note with `<a href="https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/">updateOne()</a>`</p></li><li><p><strong>D</strong>elete an existing note with `<a href="https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/">deleteOne()</a>`</p></li></ul><p>There are <a href="https://docs.mongodb.com/manual/introduction/">hundreds of these commands</a> with all different types of filters and parameters, and these are just scratching the surface.&nbsp;</p><blockquote><p><strong>&#128269; Deeper Look &#128269;</strong></p><p>Mongo has commands for aggregating data, too. If you want to find how many documents you have in a collection that match some criteria, or you want to add up revenue for products sold in the past 3 months, you&#8217;d build what they call an <a href="https://docs.mongodb.com/manual/aggregation/">aggregation pipeline</a>. This is analogous to GROUP BY in SQL.</p><p><strong>&#128269; Deeper Look &#128269;</strong></p></blockquote><h2><strong>The MongoDB ecosystem</strong></h2><p>So now that you understand the <em>database</em> that is MongoDB, we can get into what makes the company so valuable &#8211; all of the supporting products they&#8217;ve built around that database. Like most mature companies in developer tools, Mongo makes most of their money off of managed services (hosting your database for you), and use ancillary services like monitoring to make the product suite more compelling as a whole.</p><h3><strong>Atlas</strong></h3><p>Atlas is Mongo&#8217;s fully managed cloud database &#8211; it&#8217;s MongoDB, but you don&#8217;t need to host it yourself. When you set up Atlas, you choose between 3 different plans and any additional services you want to add on. And when you&#8217;re deploying, you can choose which cloud you want to use (along with any specific regions in those clouds) &#8211; AWS, GCP, or Azure. You can read <a href="https://www.mongodb.com/pricing">more about pricing here</a>.</p><p>When MongoDB started, they made most of their money off of deploying the DB in their customers&#8217; data centers (e.g. enterprise deals). But since Atlas was officially released in 2016, it has been growing like a weed, and now <a href="https://www.fool.com/earnings/call-transcripts/2021/06/04/mongodb-inc-mdb-q1-2022-earnings-call-transcript/">represents more than 50% of their revenue</a> (!). It&#8217;s a testament to a great product and tides shifting towards more workloads in the cloud.&nbsp;</p><p>Atlas gives you a lovely management console on the web for interacting with your MongoDB data. Here&#8217;s an overview of a test cluster I set up for work:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1f80d33-7a6d-43ba-b5cc-9a34900627b8_1600x785.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1f80d33-7a6d-43ba-b5cc-9a34900627b8_1600x785.png" width="1456" height="714" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/f1f80d33-7a6d-43ba-b5cc-9a34900627b8_1600x785.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:714,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1f80d33-7a6d-43ba-b5cc-9a34900627b8_1600x785.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1f80d33-7a6d-43ba-b5cc-9a34900627b8_1600x785.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1f80d33-7a6d-43ba-b5cc-9a34900627b8_1600x785.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1f80d33-7a6d-43ba-b5cc-9a34900627b8_1600x785.png 1456w" sizes="100vw"></a></figure></div><p>You can click into any of your collections to see your data and write basic queries, too:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb555c25d-5a4d-42a4-875c-f1245d1d3393_1600x888.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb555c25d-5a4d-42a4-875c-f1245d1d3393_1600x888.png" width="1456" height="808" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/b555c25d-5a4d-42a4-875c-f1245d1d3393_1600x888.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:808,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb555c25d-5a4d-42a4-875c-f1245d1d3393_1600x888.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb555c25d-5a4d-42a4-875c-f1245d1d3393_1600x888.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb555c25d-5a4d-42a4-875c-f1245d1d3393_1600x888.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb555c25d-5a4d-42a4-875c-f1245d1d3393_1600x888.png 1456w" sizes="100vw"></a></figure></div><p>I only used it for a basic project, but setting up and using Atlas was, personally, a smooth experience. And it was free!</p><p>If you&#8217;re a larger enterprise and you want to deploy MongoDB in your own data center, you can use <a href="https://www.mongodb.com/products/mongodb-enterprise-advanced">their Enterprise Advanced product</a>. It&#8217;s a package of the MongoDB software, support, and services meant for truly giant companies.</p><h3><strong>Compass</strong></h3><p>For more fully featured querying, MongoDB has an IDE (integrated development environment) called <a href="https://www.mongodb.com/products/compass">Compass</a> that you can download locally to your Mac or PC. It&#8217;s completely free and, in my experience, the best (and most feature rich) way to query your MongoDB data locally.&nbsp;</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4b2f739-456d-4ad1-bbb4-99ec7d995a1f_1600x735.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4b2f739-456d-4ad1-bbb4-99ec7d995a1f_1600x735.png" width="1456" height="669" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/e4b2f739-456d-4ad1-bbb4-99ec7d995a1f_1600x735.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:669,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4b2f739-456d-4ad1-bbb4-99ec7d995a1f_1600x735.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4b2f739-456d-4ad1-bbb4-99ec7d995a1f_1600x735.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4b2f739-456d-4ad1-bbb4-99ec7d995a1f_1600x735.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4b2f739-456d-4ad1-bbb4-99ec7d995a1f_1600x735.png 1456w" sizes="100vw"></a></figure></div><h3><strong>Search</strong></h3><p>One of the great problems among document databases is <strong>search </strong>&#8211; teams need what Google built for themselves internally. The usual state of the art is <a href="https://www.elastic.co/">Elasticsearch</a>, another document database optimized for search and usually used by teams for storing performance data like logs. The normal workflow was for teams to basically duplicate their MongoDB data into a separate Elasticsearch cluster (which, by the way, is also hard to run and thus a public-company-selling-a-managed-service exists).&nbsp;</p><p>But as of a couple of years ago, MongoDB offers <a href="https://www.mongodb.com/atlas/search">a search product for your data in Atlas</a>.&nbsp;</p><h3><strong>Some other stuff too</strong></h3><p>Beyond Atlas, MongoDB on prem, Compass, and Search, MongoDB has a few other product lines aimed at making MongoDB your single, go to place for data. A few examples:</p><ul><li><p><a href="https://www.mongodb.com/realm">Realm</a> &#8211; basically Firebase, a suite of services for building mobile apps</p></li><li><p><a href="https://www.mongodb.com/realm/mobile/sync">Realm Sync</a> - out-of-the-box data synchronization service for building mobile apps</p></li><li><p><a href="https://www.mongodb.com/products/charts">Charts</a> &#8211; service for visualizing your MongoDB data (and sharing that viz)</p></li><li><p><a href="https://www.mongodb.com/atlas/data-lake">Atlas Data Lake</a> &#8211; lets you join your MongoDB and S3 data&nbsp;</p></li></ul><p>I hinted at this before, but if you take a look at MongoDB&#8217;s site, you&#8217;ll see that they&#8217;re slowly moving away from the &#8220;NoSQL&#8221; branding and more towards just being a good database for developers. And the buildup of these products around the ecosystem helps with that story.&nbsp;</p><h2><strong>Further reading</strong></h2><ul><li><p>It&#8217;s hard to talk about &#8220;competition&#8221; for production databases, but MongoDB generally competes against relational databases (Postgres, MySQL, etc.) and other NoSQL DBs like <a href="https://aws.amazon.com/dynamodb/">DynamoDB</a> or <a href="https://firebase.google.com/docs/firestore">Firebase</a></p></li><li><p>Couchbase, a very MongoDB-like product, just released <a href="https://sec.report/Document/0001193125-21-194292/">their S-1</a></p></li></ul><p></p>]]></content:encoded></item><item><title><![CDATA[What's Kafka and what does Confluent do?]]></title><description><![CDATA[Help with solving Kafka-esque data problems]]></description><link>https://technically.substack.com/p/whats-kafka-and-what-does-confluent</link><guid isPermaLink="true">https://technically.substack.com/p/whats-kafka-and-what-does-confluent</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 15 Jun 2021 16:30:15 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7125390c-ad1d-4287-b04c-aad9a1776c37_900x903.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7125390c-ad1d-4287-b04c-aad9a1776c37_900x903.jpeg"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7125390c-ad1d-4287-b04c-aad9a1776c37_900x903.jpeg" width="900" height="903" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/7125390c-ad1d-4287-b04c-aad9a1776c37_900x903.jpeg&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:903,&quot;width&quot;:900,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;The Metamorphosis&amp;#39; &#8211; an Evolution Lasting a Century&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="The Metamorphosis&amp;#39; &#8211; an Evolution Lasting a Century" title="The Metamorphosis&amp;#39; &#8211; an Evolution Lasting a Century" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7125390c-ad1d-4287-b04c-aad9a1776c37_900x903.jpeg 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7125390c-ad1d-4287-b04c-aad9a1776c37_900x903.jpeg 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7125390c-ad1d-4287-b04c-aad9a1776c37_900x903.jpeg 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7125390c-ad1d-4287-b04c-aad9a1776c37_900x903.jpeg 1456w" sizes="100vw"></a><figcaption class="image-caption">avoid bugs like Gregor by using Kafka</figcaption></figure></div><h2><strong>The TL;DR</strong></h2><p>Apache Kafka is a framework for <strong>streaming data</strong> between internal systems, and <strong>Confluent</strong> offers Kafka as a managed service.</p><ul><li><p>We&#8217;re dealing with a lot of data these days &#8211; Big Data&#8482; &#8211; and recording, storing, and moving it around is<strong> hard and expensive</strong></p></li><li><p>Kafka helps <strong>stream that data</strong> throughout your company and <strong>distribute it</strong> to the systems that want to use it</p></li><li><p>The Kafka architecture works through a <strong>publish-subscribe</strong> pattern</p></li><li><p>Kafka 101 <strong>terminology</strong>: producers, consumers, messages, and topics</p></li></ul><p>Kafka is new, but it&#8217;s getting pretty popular: managed service provider Confluent, founded by the original creators of Kafka, <a href="https://www.sec.gov/Archives/edgar/data/0001699838/000119312521178773/d63025ds1.htm">filed their S-1 last week</a>. </p><h2><strong>I&#8217;ve got two problems, that&#8217;s it</strong></h2><p>Kafka exists to solve two fundamental problems facing almost every data infrastructure team at every company.&nbsp;</p><ol><li><p><strong>There&#8217;s a lot of data, and it&#8217;s all happening very quickly</strong></p></li></ol><p>As storage has gotten cheaper, we&#8217;ve been collecting more and more data. Most software companies record every single website visit and click, and some go even deeper. Once you have more than few users interacting with your product, you&#8217;re talking about millions of different events per day. Storing and managing that <strong>size and velocity</strong> of data is hard.</p><ol start="2"><li><p><strong>Data needs to move around to be valuable</strong></p></li></ol><p>Even if you&#8217;re a wiz at collecting and storing your data, there&#8217;s a problem: you&#8217;re going to need to move it around for it to be valuable. Where data gets initially collected and stored is rarely where it&#8217;s going to be useful.</p><p>Let&#8217;s use the internal systems we had at <a href="https://www.digitalocean.com/">DigitalOcean</a> as an example. When users interacted with our product, that would generate an event: <code>resource_created</code>, <code>resource_destroyed</code>, etc. Those events needed to be routed to multiple systems: our analytics team needed them in a warehouse for dashboarding, and our billing team needed them in the billing system to track and generate invoices.&nbsp;</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e6a116-f1d9-4398-9bef-dde06687baf5_1379x1120.jpeg"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e6a116-f1d9-4398-9bef-dde06687baf5_1379x1120.jpeg" width="1379" height="1120" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/b6e6a116-f1d9-4398-9bef-dde06687baf5_1379x1120.jpeg&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1120,&quot;width&quot;:1379,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e6a116-f1d9-4398-9bef-dde06687baf5_1379x1120.jpeg 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e6a116-f1d9-4398-9bef-dde06687baf5_1379x1120.jpeg 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e6a116-f1d9-4398-9bef-dde06687baf5_1379x1120.jpeg 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e6a116-f1d9-4398-9bef-dde06687baf5_1379x1120.jpeg 1456w" sizes="100vw"></a></figure></div><p>Moving this data on a consistent basis and schedule is actually really hard, especially after the fact.</p><p>A few engineers were dealing with these two problems at LinkedIn back in 2011, and developed Kafka to solve them (among other things). Kafka is a <strong>distributed messaging system</strong> &#8211; a bunch of jargon that means that it makes it easy to collect and move data around your organization. Kafka acts as a central bus station for your data, ingesting it from different sources (your site, your app, Salesforce, etc.) and distributing it to all of the destinations it needs to get to.&nbsp;</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2be248-e5c4-4ca9-8896-ec61c64ba0da_1358x1195.jpeg"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2be248-e5c4-4ca9-8896-ec61c64ba0da_1358x1195.jpeg" width="1358" height="1195" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/3e2be248-e5c4-4ca9-8896-ec61c64ba0da_1358x1195.jpeg&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1195,&quot;width&quot;:1358,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2be248-e5c4-4ca9-8896-ec61c64ba0da_1358x1195.jpeg 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2be248-e5c4-4ca9-8896-ec61c64ba0da_1358x1195.jpeg 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2be248-e5c4-4ca9-8896-ec61c64ba0da_1358x1195.jpeg 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2be248-e5c4-4ca9-8896-ec61c64ba0da_1358x1195.jpeg 1456w" sizes="100vw"></a></figure></div><p>Let&#8217;s dive into how Kafka works. Because that&#8217;s what you&#8217;re here for.</p><h2><strong>Pub-sub: like a newsletter, not a sandwich</strong></h2><p>Kafka works through what engineers call a <strong>publish-subscribe model,</strong> often shortened to pub-sub (to save 10 milliseconds pronouncing it). It&#8217;s an architecture for sharing data and tasks across an organization through messages. To understand what that means, think about starting a newsletter. But in reality, definitely don&#8217;t think about starting a newsletter.</p><p>If you want to get people to read your newsletter, there are basically two ways you can go about distributing it.&nbsp;</p><ol><li><p><strong>Send it when people ask for it (request-response)</strong></p></li></ol><p>You can wait for someone to ask you for a particular issue of your newsletter, and then send it over via email. You wait for their request (&#8220;I want to read this&#8221;) and then send back your response (&#8220;here&#8217;s the newsletter&#8221;). In software, this is called the <strong>request-response model</strong>.</p><ol start="2"><li><p><strong>Publish it for everyone to see (publish-subscribe)</strong></p></li></ol><p>Waiting for people to ask for your content is silly and inefficient. Instead, what everyone does is publish it widely on the web, and then anyone who wants can sign up to get it. You <em>publish</em> (&#8220;here&#8217;s the newsletter&#8221;) and then others <em>subscribe</em> (&#8220;I want to read this&#8221;), hence <strong>pub-sub</strong>. The order of operations is reversed.</p><blockquote><p>&#128560; <strong>Don&#8217;t sweat the details</strong> &#128560;</p><p>There&#8217;s a lot more to the distinction between request-response and pub-sub, and it can be hard to understand the first time around. To keep it simple, just keep your eye on the goal of pub-sub: to make sure data gets to where it needs to go easily.</p><p>&#128560; <strong>Don&#8217;t sweat the details</strong> &#128560;</p></blockquote><p>Kafka is a system for implementing pattern #2: you publish your data to a central location (Kafka), and then destinations (a data warehouse, another app, your billing system) can <em>subscribe </em>and <em>consume</em> that data as it comes in. Data only gets <em>retained</em> for a limited period of time: those destinations need to take that data and use it, or it gets thrown out to make room for new data coming in.&nbsp;</p><p>One thing worth noting: Kafka is <em>not</em> the only piece of software that you can use to build pub-sub systems, and it&#8217;s definitely not the first or most popular. <a href="https://www.rabbitmq.com/">RabbitMQ</a>, for example, has been around for almost a decade. What makes Kafka unique is how powerful it is and how it helps shepherd data to where it needs to go.</p><p>You could also make a reasonable case that <a href="https://technically.substack.com/p/what-does-segment-do">Segment</a> is a Kafka competitor. They orient themselves towards different target customers, but the underlying tech is very similar; in fact, the Segment engineering team wrote <a href="https://segment.com/blog/introducing-centrifuge/">a technical blog post</a> about how they built what basically appears to be Kafka-lite.</p><blockquote><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p><p>Kafka is a piece of software, but it&#8217;s not something you just plop into your codebase and it solves your problem. You need to <em>orient your architecture around it</em> &#8211; it&#8217;s a helpful tool for you to implement a specific type of data infrastructure, but it&#8217;s only a piece of the puzzle.</p><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p></blockquote><h2><strong>Kafka 101 and terminology</strong></h2><p>Now that we&#8217;ve got the basics down, let&#8217;s get into how people actually use Kafka. There&#8217;s special terminology for the different types of system elements that we&#8217;ve spoken about. Because it wouldn&#8217;t be software if it wasn&#8217;t confusing.</p><ul><li><p><strong>Producer</strong> &#8211; an application that acts as a <strong>source</strong> of data in Kafka.&nbsp;</p></li></ul><p>This might be your website producing click data, or your app producing product data. Producers do the publishing, like you producing your newsletter(s).</p><ul><li><p><strong>Consumer</strong> &#8211; an application that acts as a <strong>destination </strong>for data in Kafka.&nbsp;</p></li></ul><p>This might be your data warehouse storing that click data, or your CRM storing customer details. Consumers subscribe, like the homies subscribing to and reading your newsletter(s).</p><ul><li><p><strong>Topic</strong> &#8211; an individual stream of organized data.&nbsp;</p></li></ul><p>If you produce multiple newsletters (one called Dank Memes Weekly and another called Shitposting Quarterly), this corresponds to an individual one of them. Producers and consumers can produce and subscribe to a topic.</p><ul><li><p><strong>Message</strong> &#8211; an individual unit of data.&nbsp;</p></li></ul><p>This is the lowest level of data, and corresponds to an individual issue of an individual newsletter in our (mediocre) example.&nbsp;</p><p>To put it all together in a sentence: <strong>producers </strong>write <strong>messages</strong> to <strong>topics</strong> that <strong>consumers</strong> subscribe to. Phew. Part of why pub-sub is important is that multiple consumers can subscribe to a topic; that means that you only need to <em>send</em> data once, even if multiple places need access to it.&nbsp;</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0620c105-32fe-4f42-9a1d-44d26d5e650d_1499x1367.jpeg"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0620c105-32fe-4f42-9a1d-44d26d5e650d_1499x1367.jpeg" width="1456" height="1328" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/0620c105-32fe-4f42-9a1d-44d26d5e650d_1499x1367.jpeg&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1328,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0620c105-32fe-4f42-9a1d-44d26d5e650d_1499x1367.jpeg 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0620c105-32fe-4f42-9a1d-44d26d5e650d_1499x1367.jpeg 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0620c105-32fe-4f42-9a1d-44d26d5e650d_1499x1367.jpeg 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F0620c105-32fe-4f42-9a1d-44d26d5e650d_1499x1367.jpeg 1456w" sizes="100vw"></a></figure></div><p>The last important thing to know about Kafka &#8211; and part of why it can be complex to set up &#8211; is that it&#8217;s built as a distributed system by default. In order to handle crazy throughput - data coming in very, very quickly &#8211; Kafka is usually deployed across multiple servers in a data center. Networking these servers together and making sure they&#8217;re in sync is pretty difficult, and it&#8217;s part of why managed service providers like Confluent are printing money.</p><h2><strong>(bonus) what does Confluent do?</strong></h2><p><em>(this section is usually reserved for <a href="https://technically.substack.com/subscribe">paid subscribers</a>, but what the hell, have fun)</em></p><p>Confluent provides Apache Kafka as a managed service. What does that mean, you ask? If you&#8217;re a developer, using Confluent means that you get to use Kafka without having to set it up on your own servers. Confluent <em>hosts</em> Kafka for you, and you pay on a usage basis. The company was founded by the team of engineers at LinkedIn who originally built and open-sourced Kafka, so they know what they&#8217;re doing. </p><blockquote><p>&#128269; <strong>Deeper Look</strong> &#128269;</p><p>Jay Kreps, one of the Confluent founders, wrote <a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">this lengthy post explaining logs</a> and why he thinks software is moving in an event-driven direction. It&#8217;s technical, but highly worth a read if you can.</p><p>&#128269; <strong>Deeper Look</strong> &#128269;</p></blockquote><p>Confluent is a classic open source story, and fits into the same category as Elastic, Redis Labs, MongoDB, etc. It goes like this:</p><ul><li><p>Team of engineers builds open source framework at company</p></li><li><p>Software is very hard to run on your own infrastructure</p></li><li><p>They leave to found a company that commercializes said software by hosting it for you</p></li></ul><p>When I say <em>hosting</em>, that doesn&#8217;t necessarily mean that you&#8217;re abdicating all control of your environment to Confluent &#8211; <a href="https://docs.confluent.io/platform/current/installation/installing_cp/overview.html">you can also self host</a>. </p><p>In addition to managing your Kafka deployment for you, Confluent has also built <a href="https://www.confluent.io/hub/">a nice series of plugins</a> (they call it a &#8220;hub&#8221;) for getting data in and out of Kafka. They&#8217;ve also been putting muscle behind <a href="https://www.confluent.io/blog/kafka-streams-vs-ksqldb-compared/">ksqlDB</a>, a new product built on a top of Kafka that helps companies build applications that require real-time streaming (i.e. real time fraud detection). </p><p><a href="https://www.confluent.io/confluent-cloud/pricing/">Confluent&#8217;s pricing</a> is predictably confusing. If you&#8217;re using their cloud product, there are 5 line items you need to calculate to understand what your monthly bill is going to be. Here&#8217;s a screenshot of their pricing calculator that I configured to use a standard multi-zone setup on AWS:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fc46e3aa4-a32c-4955-aa37-21e1727ba5a2_824x1478.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fc46e3aa4-a32c-4955-aa37-21e1727ba5a2_824x1478.png" width="322" height="577.5679611650486" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/c46e3aa4-a32c-4955-aa37-21e1727ba5a2_824x1478.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1478,&quot;width&quot;:824,&quot;resizeWidth&quot;:322,&quot;bytes&quot;:155880,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fc46e3aa4-a32c-4955-aa37-21e1727ba5a2_824x1478.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fc46e3aa4-a32c-4955-aa37-21e1727ba5a2_824x1478.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fc46e3aa4-a32c-4955-aa37-21e1727ba5a2_824x1478.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fc46e3aa4-a32c-4955-aa37-21e1727ba5a2_824x1478.png 1456w" sizes="100vw"></a></figure></div><p>The absolute number here isn&#8217;t that important (managed services are expensive, and that&#8217;s fine) &#8211; it&#8217;s more about this pricing model optimizes for flexibility over simplicity. The first time I checked out Confluent &#8211; maybe about 2 years ago or so &#8211; they were charging simply for data in and data out. Easy. But as companies move upmarket, pricing models are destined to follow. And that&#8217;s why they need a calculator now. </p><h2><strong>Terms and concepts covered</strong></h2><pre><code>Request-response</code></pre><pre><code>Publish-subscribe (pub-sub)</code></pre><pre><code>Producers</code></pre><pre><code>Consumers</code></pre><pre><code>Topics</code></pre><pre><code>Messages</code></pre><pre><code>Distributed</code></pre><h2><strong>Further reading</strong></h2><ul><li><p>You can get a glimpse of how popular Kafka is and which companies are using it <a href="https://stackshare.io/kafka">on Stackshare</a></p></li><li><p>Confluent&#8217;s site has a <a href="https://www.confluent.io/what-is-apache-kafka">great video</a> explaining the thinking behind Kafka and what exactly it is</p></li><li><p>My friend Muji wrote a great teardown of Kafka and Confluent (really in depth) for his paid subscribers <a href="https://hhhypergrowth.com/premium-a-kafka-deep-dive/">here</a></p></li></ul>]]></content:encoded></item><item><title><![CDATA[What does Databricks do?]]></title><description><![CDATA[The $28B private company nobody understands]]></description><link>https://technically.substack.com/p/what-does-databricks-do</link><guid isPermaLink="true">https://technically.substack.com/p/what-does-databricks-do</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Thu, 27 May 2021 16:08:07 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F1859526a-37e6-4032-86cd-9cfb6fdd0456_1600x723.jpeg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p>Databricks sells a data science and analytics platform &#8211; i.e. a place to query and share data &#8211; built on top of an open source package called Apache Spark.&nbsp;</p><ul><li><p>Apache Spark is an open source engine for <strong>running analytics and machine learning</strong> across distributed, giant datasets</p></li><li><p>Spark is notoriously <strong>hard to run on your own infrastructure </strong>and companies o&#8230;</p></li></ul>
      <p>
          <a href="https://technically.substack.com/p/what-does-databricks-do">
              Read more
          </a>
      </p>
   ]]></content:encoded></item><item><title><![CDATA[What's Serverless?]]></title><description><![CDATA[Beware of marketers]]></description><link>https://technically.substack.com/p/whats-serverless</link><guid isPermaLink="true">https://technically.substack.com/p/whats-serverless</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Tue, 11 May 2021 16:39:46 GMT</pubDate><enclosure url="https://cdn.substack.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe33b1121-bed6-4963-82f7-24c9e5cc6697_1334x646.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p>Serverless is a catch-all term for apps and products that <strong>don&#8217;t require you to manage your own servers</strong>.</p><ul><li><p>Every app runs on a set of servers somewhere, and there&#8217;s <strong>high overhead</strong> involved in managing them</p></li><li><p>Serverless just means that your app &#8211; or the infrastructure you pay for &#8211; <strong>doesn&#8217;t require server management</strong></p></li><li><p>In practice, people use the term to refer to a <strong>function-based architecture</strong> instead of an app-based one</p></li><li><p>Each major cloud has a serverless platform, the most notable being <strong>AWS&#8217;s Lambda</strong></p></li></ul><p>People mean a million different things when they talk about serverless, so we&#8217;ll explore it from a few different angles. The important thing is that it&#8217;s getting wildly popular, and may be how everyone ships apps in the future. The <strong>future</strong>.</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa94feeb4-b7f1-42c6-9707-b6620d7743b5_200x200.gif"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa94feeb4-b7f1-42c6-9707-b6620d7743b5_200x200.gif" width="320" height="320" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/a94feeb4-b7f1-42c6-9707-b6620d7743b5_200x200.gif&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:200,&quot;width&quot;:200,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa94feeb4-b7f1-42c6-9707-b6620d7743b5_200x200.gif 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa94feeb4-b7f1-42c6-9707-b6620d7743b5_200x200.gif 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa94feeb4-b7f1-42c6-9707-b6620d7743b5_200x200.gif 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fa94feeb4-b7f1-42c6-9707-b6620d7743b5_200x200.gif 1456w" sizes="100vw"></a></figure></div><h2><strong>Quick reminder: backends today</strong></h2><p>If you&#8217;re a developer building your app, how do you deploy your backend today?&nbsp;</p><p>Remember, most apps you use have two major components:</p><ul><li><p>A <strong>frontend</strong> &#8211; the user interface, usually in a web browser or phone app&nbsp;</p></li><li><p>A <strong>backend</strong> &#8211; the logic and data of the app, usually in a database and APIs on top of it</p></li></ul><p>A good example is <a href="https://substack.com">Substack</a>, the lovely folks who help me send out these emails and posts. Substack has a frontend and a backend:</p><ul><li><p>The Substack <strong>frontend</strong> is the web app I use to write posts, look at analytics, and send emails. It&#8217;s written in HTML, CSS, and Javascript</p></li><li><p>The Substack <strong>backend</strong> stores text, recipients, and stats, as well as has APIs for sending mail and adding subscriptions. It uses a database and a backend language (which could also be Javascript, but that&#8217;s neither here nor there)</p></li></ul><p>The frontend and backend work together to give you what you see when you load a page in your favorite app. The backend is usually the part of the app that&#8217;s the most <em>complex</em> to build and deploy, because it undergoes the most &#8220;stress&#8221; and needs to scale appropriately. If 1,000 people are using your app at the same time, your database is going to need to be able to handle 1,000 queries every few seconds &#8211; so you can see how it quickly gets out of hand.</p><blockquote><p>&#128302; <strong>Dependencies</strong> &#128302;</p><p>If you&#8217;re still a bit iffy on how this works, read up on <a href="https://technically.substack.com/p/whats-devops">what DevOps is</a> and how engineering teams deploy high performing apps.</p><p>&#128302; <strong>Dependencies</strong> &#128302;</p></blockquote><p>When you&#8217;re trying to make sure your database and APIs can keep up with your app&#8217;s traffic, you have a few options:</p><ul><li><p>Scaling <strong>vertically</strong> &#8211; whatever server you&#8217;re running your database on, make it bigger, faster, stronger</p></li><li><p>Scaling <strong>horizontally</strong> &#8211; create copies of your server, and let each shoulder a bit of the load</p></li></ul><p>Scaling vertically is really easy (you just tell AWS to suck out more of your money), but not fully sustainable or cost efficient; scaling horizontally, though, is notoriously difficult.</p><p>And if that devil&#8217;s bargain wasn&#8217;t enough, scaling isn&#8217;t the only problem you&#8217;ll face when running your backend. Making sure your servers are performant is highly stack dependent, but will likely involve:</p><ul><li><p>Setting up the servers in the first place, installing things, etc.</p></li><li><p>Monitoring your app to make sure requests are running smoothly</p></li><li><p>Monitoring your hardware to check CPU, RAM, and Disk utilization</p></li></ul><p>These are just a few of the things that engineers deal with (especially if you have a DevOps focused team) when managing their own servers.</p><blockquote><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p><p>Scaling needs apply to frontends too. And pieces of the stack that are glue for the frontend and backend &#8211; like if you&#8217;re using a web framework like <a href="https://nextjs.org/">NextJS</a> &#8211;  need to run on a server somewhere. So while we&#8217;re covering mostly backend here, this is a bit of an oversimplification.</p><blockquote></blockquote><p>&#128680; <strong>Confusion Alert </strong>&#128680;</p></blockquote><h2><strong>Some definitions of serverless</strong></h2><p>So if the above is working with servers, serverless &#8211; in <em>theory</em> &#8211; should just mean anything that <em>doesn&#8217;t</em> require you to use servers. But that&#8217;s kind of a stupid definition, because a lot of things don&#8217;t require you to interact with servers. If you&#8217;re paying GitHub to manage your code repositories, is that serverless? Is Gmail serverless?&nbsp;</p><div class="tweet" data-attrs="{&quot;url&quot;:&quot;https://twitter.com/fulhack/status/1379553278363631621?s=20&quot;,&quot;full_text&quot;:&quot;I feel like we need to raise the bar for what's \&quot;serverless\&quot;. IMO any of these things disqualifies:\n- You have to maintain the compute nodes\n- Anything that includes the notion of a \&quot;cluster\&quot;\n- Pre-provisioning capacity\n- Paying for idle capacity&quot;,&quot;username&quot;:&quot;fulhack&quot;,&quot;name&quot;:&quot;Erik Bernhardsson&quot;,&quot;date&quot;:&quot;Tue Apr 06 21:55:07 +0000 2021&quot;,&quot;photos&quot;:[],&quot;quoted_tweet&quot;:{},&quot;retweet_count&quot;:5,&quot;like_count&quot;:66,&quot;expanded_url&quot;:{},&quot;video_url&quot;:null}"><a href="https://twitter.com/fulhack/status/1379553278363631621?s=20" target="_blank"><div class="tweet-header"><img class="tweet-user-avatar" src="https://cdn.substack.com/image/twitter_name/w_36/fulhack.jpg" alt="Twitter avatar for @fulhack"><span class="tweet-author-name">Erik Bernhardsson </span><span class="tweet-author">@fulhack</span></div>I feel like we need to raise the bar for what's "serverless". IMO any of these things disqualifies:
- You have to maintain the compute nodes
- Anything that includes the notion of a "cluster"
- Pre-provisioning capacity
- Paying for idle capacity</a><a href="https://twitter.com/fulhack/status/1379553278363631621?s=20" target="_blank"><div class="tweet-footer"><p class="tweet-date">April 6th 2021</p><span class="retweets"><span class="rt-count">5</span> Retweets</span><span class="likes"><span class="like-count">66</span> Likes</span></div></a></div><p>To navigate through such murky waters, I&#8217;m going to propose 3 definitions of serverless below. The 3rd and final one is the most important, because it&#8217;s what developers generally mean when they talk about it.&nbsp;</p><ol><li><p><strong>Serverless as SaaS</strong></p></li></ol><p>When you (i.e. developers) outsource any piece of the software stack to a third party via SaaS, that&#8217;s technically serverless. A few examples:</p><ul><li><p>Using <a href="https://github.com/">GitHub</a> for hosting code repositories</p></li><li><p>Using <a href="https://auth0.com/">Auth0</a> for your app&#8217;s authentication</p></li><li><p>Using <a href="https://technically.substack.com/p/what-does-datadog-do">Datadog</a> for monitoring</p></li><li><p>Using <a href="https://technically.substack.com/p/what-does-stripe-do">Stripe</a> for payments</p></li></ul><p>While it <em>is</em> useful to appreciate that all of these SaaS solutions obviate the need for developers to build and maintain their own infrastructure, it&#8217;s not usually what we mean when we say serverless. I call this the MBA definition &#8211; i.e. it&#8217;s useless.</p><ol start="2"><li><p><strong>Serverless as PaaS</strong></p></li></ol><p>Moving further down into the infrastructure layer, outsourcing parts of your infrastructure to managed services from our favorite neighborhood cloud providers can be referred to as serverless. A few examples:</p><ul><li><p><a href="https://vercel.com/">Vercel</a> and <a href="https://www.netlify.com/">Netlify</a> for frontends and very light backends</p></li><li><p><a href="https://www.confluent.io/">Confluent</a> for event busses</p></li><li><p><a href="https://aws.amazon.com/s3/">S3</a> for object storage</p></li></ul><p>This is where terms like &#8220;serverless database&#8221; or &#8220;serverless frontend&#8221; apply.</p><ol start="3"><li><p><strong>Serverless as functions</strong></p></li></ol><p>Finally, the most specific definition of serverless is what developers are talking about most of the time: it&#8217;s a method of deploying your app via <strong>functions</strong> instead of monolithic apps and endpoints. Each major cloud provider has their own product for it:</p><ul><li><p>AWS has <a href="https://aws.amazon.com/lambda/">Lambda</a></p></li><li><p>GCP has <a href="https://cloud.google.com/functions">Cloud Functions</a></p></li><li><p>Azure has <a href="https://azure.microsoft.com/en-us/services/functions/">Functions</a></p></li></ul><p>So in other words, you don&#8217;t just not manage servers &#8211; you <strong>deploy your app as a series of separate functions</strong>, which is <em>quite</em> different than how it&#8217;s normally done.&nbsp;In that sense, serverless is an architecture decision as much as it is a product.</p><div><hr></div><p>So basically to sum up here, when you see the word &#8220;serverless&#8221; it&#8217;s all about context. People also try and co-opt the term to sound more sophisticated &#8211; but as we&#8217;ve seen, plenty of &#8220;serverless&#8221; products don&#8217;t necessarily <em>replace</em> what you <em>would</em> have used a server for. So be skeptical &#128578;</p><h2><strong>AWS Lambda and its malcontents</strong></h2><p>Platforms like Lambda are what developers usually mean when they say serverless. So what does Lambda (and the other equivalent offerings from cloud homies) do?</p><ul><li><p>In Lambda, you deploy your code as separate, logically independent <strong>functions</strong></p></li><li><p>You can <strong>trigger</strong> those functions manually, or via defined <strong>events</strong> in the AWS ecosystem</p></li></ul><p>You might have a single function in your app that inserts a new user into the database. Instead of running this, along with all of your other functions, on a central server, you can upload them all separately to Lambda, and trigger them from your frontend. Literally, the Lambda UI lets you just paste code in there as a function:</p><div class="captioned-image-container"><figure><a class="image-link image2" target="_blank" rel="nofollow" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe33b1121-bed6-4963-82f7-24c9e5cc6697_1334x646.png"><img src="https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe33b1121-bed6-4963-82f7-24c9e5cc6697_1334x646.png" width="1334" height="646" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/e33b1121-bed6-4963-82f7-24c9e5cc6697_1334x646.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:646,&quot;width&quot;:1334,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null}" class="sizing-normal" alt="" srcset="https://cdn.substack.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe33b1121-bed6-4963-82f7-24c9e5cc6697_1334x646.png 424w, https://cdn.substack.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe33b1121-bed6-4963-82f7-24c9e5cc6697_1334x646.png 848w, https://cdn.substack.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe33b1121-bed6-4963-82f7-24c9e5cc6697_1334x646.png 1272w, https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fe33b1121-bed6-4963-82f7-24c9e5cc6697_1334x646.png 1456w" sizes="100vw"></a></figure></div><p><em>(h/t to <a href="https://itnext.io/creating-aws-lambda-applications-with-sam-dd13258c16dd">Daniel for the screenshot</a>)</em></p><p>Once you trigger that Lambda function, AWS takes care of spinning up a server or allocating it to an existing one. Hence, serverless.</p><p>But it&#8217;s deeply ironic that this is what we&#8217;ve come to define serverless as, because Lambda is <em>barely</em> actually serverless. That&#8217;s because:</p><ol><li><p><strong>Lambda is not a database</strong>. You still need a database, and need to worry about it scaling, etc.</p></li><li><p><strong>You need to size Lambda functions</strong>. You have to <a href="https://aws.amazon.com/lambda/pricing/">allocate a specific amount of RAM</a> to Lambda functions in advance. Idk, sounds like a server&#8230;</p></li></ol><p>This is why in practice, most uses of Lambda and its siblings tend to be for <strong>non-core parts of the app</strong>. Most of the <a href="https://aws.amazon.com/lambda/resources/customer-case-studies/">customer case studies</a> on the site talk about things like image pipelines, analytics, or general machine learning. High growth startups are usually not running their core app logic on Lambda (until I&#8217;m proven wrong, at least).</p><blockquote><p><strong>&#128269; Deeper Look &#128269;</strong></p><p>Literally, AWS built <a href="https://aws.amazon.com/rds/proxy/">a proxy service</a> for their managed database service, RDS, so it can connect to functions running via Lambda. So on their features page for their &#8220;serverless&#8221; product, they&#8217;re telling you about how to work with the &#8220;server-full&#8221; parts of your app. Which is kind of weird?</p><p><strong>&#128269; Deeper Look &#128269;</strong></p></blockquote><p>This is a problem with function-driven architectures these days &#8211; the developer experience isn&#8217;t quite there, especially as it relates to developing functions locally and then uploading them to the cloud. Personally, I was working on a project using <a href="https://cloud.google.com/functions">GCP Cloud Functions</a>, and it was <em>infuriating</em> &#8211; I needed to test passing a specific data type, and there&#8217;s basically no tooling to mock or run that on my laptop. That&#8217;s why we&#8217;re seeing frameworks like <a href="https://docs.serverless-stack.com/">SST (Serverless Stack)</a> try to improve DevEx for platforms like Lambda.&nbsp;</p><p>Meanwhile, we&#8217;re seeing a lot more interesting stuff in the database space. <a href="https://fauna.com/pricing">Fauna</a> purports to be serverless, and charges you exclusively for usage (not based on server size or anything like that). BigQuery, a <a href="https://technically.substack.com/p/the-details-data-warehouses">popular data warehouse</a>, is definitely serverless. Consensus is that we&#8217;re still on the cusp here, but it&#8217;s definitely something to keep an eye out for.&nbsp;</p><p></p>]]></content:encoded></item><item><title><![CDATA[What does UIPath do?]]></title><description><![CDATA[Creating robots that will destroy us]]></description><link>https://technically.substack.com/p/what-does-uipath-do</link><guid isPermaLink="true">https://technically.substack.com/p/what-does-uipath-do</guid><dc:creator><![CDATA[Justin]]></dc:creator><pubDate>Mon, 26 Apr 2021 16:35:13 GMT</pubDate><enclosure url="https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/e0a4fa82-bfa3-49c5-a9ac-2a28c127546b_1428x880.png" length="0" type="image/jpeg"/><content:encoded><![CDATA[<h2><strong>The TL;DR</strong></h2><p>UIPath helps people <strong>automate rote, repetitive manual tasks</strong> like updating spreadsheets, creating documents, and sending emails.&nbsp;</p><ul><li><p>Work that we do tends to be <strong>repetitive and manual</strong> &#8211; pretty much anything with a <em>process</em> like forms, compliance, etc.</p></li><li><p>Traditional approaches to automation use <strong>exposed APIs from software</strong> to hack together scripts &#8211; but many&#8230;</p></li></ul>
      <p>
          <a href="https://technically.substack.com/p/what-does-uipath-do">
              Read more
          </a>
      </p>
   ]]></content:encoded></item></channel></rss>